diff -ruN gcc-4.9.2/gcc/testsuite/gcc.dg/graphite/interchange-0.c gcc-4.9.2-test/gcc/testsuite/gcc.dg/graphite/interchange-0.c
--- gcc-4.9.2/gcc/testsuite/gcc.dg/graphite/interchange-0.c	2010-04-22 14:50:23.000000000 -0500
+++ gcc-4.9.2-test/gcc/testsuite/gcc.dg/graphite/interchange-0.c	1969-12-31 18:00:00.000000000 -0600
@@ -1,50 +0,0 @@
-/* { dg-require-effective-target size32plus } */
-
-#define DEBUG 0
-
-#if DEBUG
-#include <stdio.h>
-#endif
-
-#define N 1000
-int a[N][N];
-
-static int __attribute__((noinline))
-foo (void)
-{
-  int j;
-  int i;
-
-  for (i = 0; i < N; i++)
-    for (j = 0; j < N; j++)
-      a[j][i] = a[j][i] + 1;
-
-  return a[N-1][N-1];
-}
-
-extern void abort ();
-
-int
-main (void)
-{
-  int i, j, res;
-
-  for (i = 0; i < N; i++)
-    for (j = 0; j < N; j++)
-      a[i][j] = 1;
-
-  a[N-1][N-1] = 12;
-  res = foo ();
-
-#if DEBUG
-  fprintf (stderr, "res = %d \n", res);
-#endif
-
-  if (res != 13)
-    abort ();
-
-  return 0;
-}
-
-/* { dg-final { scan-tree-dump-times "will be interchanged" 1 "graphite" } } */
-/* { dg-final { cleanup-tree-dump "graphite" } } */
diff -ruN gcc-4.9.2/gcc/testsuite/gcc.dg/graphite/interchange-10.c gcc-4.9.2-test/gcc/testsuite/gcc.dg/graphite/interchange-10.c
--- gcc-4.9.2/gcc/testsuite/gcc.dg/graphite/interchange-10.c	2010-02-07 13:49:26.000000000 -0600
+++ gcc-4.9.2-test/gcc/testsuite/gcc.dg/graphite/interchange-10.c	1969-12-31 18:00:00.000000000 -0600
@@ -1,50 +0,0 @@
-/* { dg-require-effective-target size32plus } */
-
-#define DEBUG 0
-#if DEBUG
-#include <stdio.h>
-#endif
-
-double u[1782225];
-
-static void __attribute__((noinline))
-foo (int N, int *res)
-{
-  int i, j;
-  double sum = 0.0;
-
-  for (i = 0; i < N; i++)
-    for (j = 0; j < N; j++)
-      sum = sum + u[i + 1335 * j];
-
-  for (i = 0; i < N; i++)
-    for (j = 0; j < N; j++)
-      sum = sum + u[i + 1335 * j];
-
-  *res = sum + N + u[1336 * 2] + u[1336];
-}
-
-extern void abort ();
-
-int
-main (void)
-{
-  int i, res;
-
-  for (i = 0; i < 1782225; i++)
-    u[i] = 2;
-
-  foo (1335, &res);
-
-#if DEBUG
-  fprintf (stderr, "res = %d \n", res);
-#endif
-
-  if (res != 7130239)
-    abort ();
-
-  return 0;
-}
-
-/* { dg-final { scan-tree-dump-times "will be interchanged" 2 "graphite" } } */
-/* { dg-final { cleanup-tree-dump "graphite" } } */
diff -ruN gcc-4.9.2/gcc/testsuite/gcc.dg/graphite/interchange-11.c gcc-4.9.2-test/gcc/testsuite/gcc.dg/graphite/interchange-11.c
--- gcc-4.9.2/gcc/testsuite/gcc.dg/graphite/interchange-11.c	2011-01-25 00:45:54.000000000 -0600
+++ gcc-4.9.2-test/gcc/testsuite/gcc.dg/graphite/interchange-11.c	1969-12-31 18:00:00.000000000 -0600
@@ -1,50 +0,0 @@
-/* { dg-require-effective-target size32plus } */
-
-#define DEBUG 0
-#if DEBUG
-#include <stdio.h>
-#endif
-
-double u[1782225];
-
-static void __attribute__((noinline))
-foo (int N, int *res)
-{
-  int i, j;
-  double sum = 0.0;
-
-  /* These two loops should be interchanged.  */
-  for (i = 0; i < 1335; i++)
-    {
-      for (j = 0; j < 1335; j++)
-	sum = sum + u[i + 1335 * j];
-
-      u[1336 * i] *= 2;
-    }
-  *res = sum;
-}
-
-extern void abort ();
-
-int
-main (void)
-{
-  int i, res;
-
-  for (i = 0; i < 1782225; i++)
-    u[i] = 2;
-
-  foo (1335, &res);
-
-#if DEBUG
-  fprintf (stderr, "res = %d \n", res);
-#endif
-
-  if (res != 3564450)
-    abort ();
-
-  return 0;
-}
-
-/* { dg-final { scan-tree-dump-times "will be interchanged" 1 "graphite" } } */
-/* { dg-final { cleanup-tree-dump "graphite" } } */
diff -ruN gcc-4.9.2/gcc/testsuite/gcc.dg/graphite/interchange-13.c gcc-4.9.2-test/gcc/testsuite/gcc.dg/graphite/interchange-13.c
--- gcc-4.9.2/gcc/testsuite/gcc.dg/graphite/interchange-13.c	2011-01-25 00:45:54.000000000 -0600
+++ gcc-4.9.2-test/gcc/testsuite/gcc.dg/graphite/interchange-13.c	1969-12-31 18:00:00.000000000 -0600
@@ -1,54 +0,0 @@
-/* { dg-require-effective-target size32plus } */
-
-/* Formerly known as ltrans-1.c */
-
-#define DEBUG 0
-#if DEBUG
-#include <stdio.h>
-#endif
-
-double u[25];
-
-static int __attribute__((noinline))
-foo (int N)
-{
-  int i, j;
-  double sum = 0.0;
-
-  /* These two loops should be interchanged. */
-  for (i = 0; i < N; i++)
-    {
-      for (j = 0; j < N; j++)
-	sum = sum + u[i + 5 * j];
-
-      u[6 * i] *= 2;
-    }
-
-  return sum + N + u[6];
-}
-
-extern void abort ();
-
-int
-main (void)
-{
-  int i, j, res;
-
-  for (i = 0; i < 25; i++)
-    u[i] = 2;
-
-  res = foo (5);
-
-#if DEBUG
-  fprintf (stderr, "res = %d \n", res);
-#endif
-
-  if (res != 59)
-    abort ();
-
-  return 0;
-}
-
-
-/* { dg-final { scan-tree-dump-times "will be interchanged" 1 "graphite" } } */
-/* { dg-final { cleanup-tree-dump "graphite" } } */
diff -ruN gcc-4.9.2/gcc/testsuite/gcc.dg/graphite/interchange-16.c gcc-4.9.2-test/gcc/testsuite/gcc.dg/graphite/interchange-16.c
--- gcc-4.9.2/gcc/testsuite/gcc.dg/graphite/interchange-16.c	2012-01-10 03:14:51.000000000 -0600
+++ gcc-4.9.2-test/gcc/testsuite/gcc.dg/graphite/interchange-16.c	1969-12-31 18:00:00.000000000 -0600
@@ -1,22 +0,0 @@
-void spread_i1 (int *rptr, int *sptr, int ncopies, int *extent, int rdelta, int m)
-{
-  int *dest;
-  int n;
-
-  while (m--)
-    {
-      dest = rptr;
-      for (n = 0; n < ncopies; n ++)
-	{
-	  *dest = *sptr;
-	  dest += rdelta;
-	}
-      if (extent [n])
-	if (n)
-	  rptr ++;
-    }
-}
-
-int main() { return 0; }
-
-/* { dg-final { cleanup-tree-dump "graphite" } } */
diff -ruN gcc-4.9.2/gcc/testsuite/gcc.dg/graphite/interchange-1.c gcc-4.9.2-test/gcc/testsuite/gcc.dg/graphite/interchange-1.c
--- gcc-4.9.2/gcc/testsuite/gcc.dg/graphite/interchange-1.c	2011-01-25 00:45:54.000000000 -0600
+++ gcc-4.9.2-test/gcc/testsuite/gcc.dg/graphite/interchange-1.c	1969-12-31 18:00:00.000000000 -0600
@@ -1,53 +0,0 @@
-/* { dg-require-effective-target size32plus } */
-
-/* Formerly known as ltrans-1.c */
-
-#define DEBUG 0
-#if DEBUG
-#include <stdio.h>
-#endif
-
-double u[1782225];
-
-static int __attribute__((noinline))
-foo (int N)
-{
-  int i, j;
-  double sum = 0.0;
-
-  /* These two loops should be interchanged.  */
-  for (i = 0; i < N; i++)
-    {
-      for (j = 0; j < N; j++)
-	sum = sum + u[i + 1335 * j];
-
-      u[1336 * i] *= 2;
-    }
-
-  return sum + N + u[1336 * 2] + u[1336];
-}
-
-extern void abort ();
-
-int
-main (void)
-{
-  int i, j, res;
-
-  for (i = 0; i < 1782225; i++)
-    u[i] = 2;
-
-  res = foo (1335);
-
-#if DEBUG
-  fprintf (stderr, "res = %d \n", res);
-#endif
-
-  if (res != 3565793)
-    abort ();
-
-  return 0;
-}
-
-/* { dg-final { scan-tree-dump-times "will be interchanged" 1 "graphite" } } */
-/* { dg-final { cleanup-tree-dump "graphite" } } */
diff -ruN gcc-4.9.2/gcc/testsuite/gcc.dg/graphite/interchange-2.c gcc-4.9.2-test/gcc/testsuite/gcc.dg/graphite/interchange-2.c
--- gcc-4.9.2/gcc/testsuite/gcc.dg/graphite/interchange-2.c	2010-02-07 13:49:26.000000000 -0600
+++ gcc-4.9.2-test/gcc/testsuite/gcc.dg/graphite/interchange-2.c	1969-12-31 18:00:00.000000000 -0600
@@ -1,56 +0,0 @@
-/* { dg-require-effective-target size32plus } */
-
-/* Formerly known as ltrans-2.c */
-
-#define DEBUG 0
-#if DEBUG
-#include <stdio.h>
-#endif
-
-double u[1782225];
-
-static void __attribute__((noinline))
-foo (int N, int *res)
-{
-  unsigned int i, j;
-  double sum = 0;
-
-  /* This loop should be converted to a perfect nest and
-     interchanged.  */
-  for (i = 0; i < N; i++)
-    {
-      for (j = 0; j < N; j++)
-	{
-	  sum = sum + u[i + 1335 * j];
-	  if (j == N - 1)
-	    u[1336 * i] *= 2;
-	}
-    }
-
-  *res = sum + N + u[1336 * 2] + u[1336];
-}
-
-extern void abort ();
-
-int
-main (void)
-{
-  int i, j, res;
-
-  for (i = 0; i < 1782225; i++)
-    u[i] = 2;
-
-  foo (1335, &res);
-
-#if DEBUG
-  fprintf (stderr, "res = %d \n", res);
-#endif
-
-  if (res != 3565793)
-    abort ();
-
-  return 0;
-}
-
-/* { dg-final { scan-tree-dump-times "will be interchanged" 1 "graphite" { xfail *-*-* } } } */ 
-/* { dg-final { cleanup-tree-dump "graphite" } } */
diff -ruN gcc-4.9.2/gcc/testsuite/gcc.dg/graphite/interchange-3.c gcc-4.9.2-test/gcc/testsuite/gcc.dg/graphite/interchange-3.c
--- gcc-4.9.2/gcc/testsuite/gcc.dg/graphite/interchange-3.c	2011-07-26 13:48:08.000000000 -0500
+++ gcc-4.9.2-test/gcc/testsuite/gcc.dg/graphite/interchange-3.c	1969-12-31 18:00:00.000000000 -0600
@@ -1,51 +0,0 @@
-/* { dg-require-effective-target size32plus } */
-
-/* Formerly known as ltrans-3.c */
-
-#define DEBUG 0
-#if DEBUG
-#include <stdio.h>
-#endif
-
-double u[1782225];
-
-static void __attribute__((noinline))
-foo (int N, int *res)
-{
-  int i, j;
-  double sum = 0;
-  for (i = 0; i < N; i++)
-    {
-      for (j = 0; j < N; j++)
-	{
-	  sum = sum + u[i + 1335 * j];
-	}
-    }
-
-  *res = sum + N + u[1336 * 2] + u[1336];
-}
-
-extern void abort ();
-
-int
-main (void)
-{
-  int i, j, res;
-
-  for (i = 0; i < 1782225; i++)
-    u[i] = 2;
-
-  foo (1335, &res);
-
-#if DEBUG
-  fprintf (stderr, "res = %d \n", res);
-#endif
-
-  if (res != 3565789)
-    abort ();
-
-  return 0;
-}
-
-/* { dg-final { scan-tree-dump-times "will be interchanged" 1 "graphite" } } */
-/* { dg-final { cleanup-tree-dump "graphite" } } */
diff -ruN gcc-4.9.2/gcc/testsuite/gcc.dg/graphite/interchange-4.c gcc-4.9.2-test/gcc/testsuite/gcc.dg/graphite/interchange-4.c
--- gcc-4.9.2/gcc/testsuite/gcc.dg/graphite/interchange-4.c	2010-02-07 13:49:26.000000000 -0600
+++ gcc-4.9.2-test/gcc/testsuite/gcc.dg/graphite/interchange-4.c	1969-12-31 18:00:00.000000000 -0600
@@ -1,50 +0,0 @@
-/* { dg-require-effective-target size32plus } */
-
-/* Formerly known as ltrans-4.c */
-
-#define DEBUG 0
-#if DEBUG
-#include <stdio.h>
-#endif
-
-double u[1782225];
-
-static int __attribute__((noinline))
-foo (int N, int *res)
-{
-  int i, j;
-  double sum = 0;
-  for (i = 0; i < N; i++)
-    for (j = 0; j < N; j++)
-      sum = sum + u[i + 1335 * j];
-
-  for (i = 0; i < N; i++)
-    u[1336 * i] *= 2;
-
-  *res = sum + N + u[1336 * 2] + u[1336];
-}
-
-extern void abort ();
-
-int
-main (void)
-{
-  int i, j, res;
-
-  for (i = 0; i < 1782225; i++)
-    u[i] = 2;
-
-  foo (1335, &res);
-
-#if DEBUG
-  fprintf (stderr, "res = %d \n", res);
-#endif
-
-  if (res != 3565793)
-    abort ();
-
-  return 0;
-}
-
-/* { dg-final { scan-tree-dump-times "will be interchanged" 1 "graphite" } } */
-/* { dg-final { cleanup-tree-dump "graphite" } } */
diff -ruN gcc-4.9.2/gcc/testsuite/gcc.dg/graphite/interchange-5.c gcc-4.9.2-test/gcc/testsuite/gcc.dg/graphite/interchange-5.c
--- gcc-4.9.2/gcc/testsuite/gcc.dg/graphite/interchange-5.c	2010-02-07 13:49:26.000000000 -0600
+++ gcc-4.9.2-test/gcc/testsuite/gcc.dg/graphite/interchange-5.c	1969-12-31 18:00:00.000000000 -0600
@@ -1,50 +0,0 @@
-/* { dg-require-effective-target size32plus } */
-
-/* Formerly known as ltrans-5.c */
-
-#define DEBUG 0
-#if DEBUG
-#include <stdio.h>
-#endif
-
-#define N 100
-#define M 1111
-int A[N][M];
-
-static int __attribute__((noinline))
-foo (void)
-{
-  int i, j;
-
-  for( i = 0; i < M; i++)
-    for( j = 0; j < N; j++)
-      A[j][i] = 5 * A[j][i];
-
-  return A[0][0] + A[N-1][M-1];
-}
-
-extern void abort ();
-
-int
-main (void)
-{
-  int i, j, res;
-
-  for (i = 0; i < N; i++)
-    for (j = 0; j < M; j++)
-      A[i][j] = 2;
-
-  res = foo ();
-
-#if DEBUG
-  fprintf (stderr, "res = %d \n", res);
-#endif
-
-  if (res != 20)
-    abort ();
-
-  return 0;
-}
-
-/* { dg-final { scan-tree-dump-times "will be interchanged" 1 "graphite" } } */
-/* { dg-final { cleanup-tree-dump "graphite" } } */
diff -ruN gcc-4.9.2/gcc/testsuite/gcc.dg/graphite/interchange-6.c gcc-4.9.2-test/gcc/testsuite/gcc.dg/graphite/interchange-6.c
--- gcc-4.9.2/gcc/testsuite/gcc.dg/graphite/interchange-6.c	2010-02-07 13:49:26.000000000 -0600
+++ gcc-4.9.2-test/gcc/testsuite/gcc.dg/graphite/interchange-6.c	1969-12-31 18:00:00.000000000 -0600
@@ -1,51 +0,0 @@
-/* { dg-require-effective-target size32plus } */
-
-/* Formerly known as ltrans-6.c */
-
-#define DEBUG 0
-#if DEBUG
-#include <stdio.h>
-#endif
-
-#define N 100
-#define M 200
-
-static int __attribute__((noinline))
-foo (int A[N][M])
-{
-  int i, j;
-
-  /* This loop should be interchanged. */
-  for(j = 0; j < M; j++)
-    for(i = 0; i < N; i++)
-      A[i][j] = A[i][j] + A[i][j];
-
-  return A[0][0] + A[N-1][M-1];
-}
-
-extern void abort ();
-
-int
-main (void)
-{
-  int A[N][M];
-  int i, j, res;
-
-  for (i = 0; i < N; i++)
-    for (j = 0; j < M; j++)
-      A[i][j] = 2;
-
-  res = foo (A);
-
-#if DEBUG
-  fprintf (stderr, "res = %d \n", res);
-#endif
-
-  if (res != 8)
-    abort ();
-
-  return 0;
-}
-
-/* { dg-final { scan-tree-dump-times "will be interchanged" 1 "graphite" } } */
-/* { dg-final { cleanup-tree-dump "graphite" } } */
diff -ruN gcc-4.9.2/gcc/testsuite/gcc.dg/graphite/interchange-7.c gcc-4.9.2-test/gcc/testsuite/gcc.dg/graphite/interchange-7.c
--- gcc-4.9.2/gcc/testsuite/gcc.dg/graphite/interchange-7.c	2010-02-07 13:49:26.000000000 -0600
+++ gcc-4.9.2-test/gcc/testsuite/gcc.dg/graphite/interchange-7.c	1969-12-31 18:00:00.000000000 -0600
@@ -1,50 +0,0 @@
-/* { dg-require-effective-target size32plus } */
-
-/* Formerly known as ltrans-8.c */
-
-#define DEBUG 0
-#if DEBUG
-#include <stdio.h>
-#endif
-
-#define N 111
-#define M 1111
-
-static int __attribute__((noinline))
-foo (double *a)
-{
-  int i,j;
-  int r = 0;
-
-  for (i = 0; i < N; ++i)
-    for (j = 0; j < M; ++j)
-      r += a[j * N + i];
-
-  return r;
-}
-
-extern void abort ();
-
-int
-main (void)
-{
-  double A[N*M];
-  int i, res;
-
-  for (i = 0; i < N*M; i++)
-    A[i] = 2;
-
-  res = foo (A);
-
-#if DEBUG
-  fprintf (stderr, "res = %d \n", res);
-#endif
-
-  if (res != 246642)
-    abort ();
-
-  return 0;
-}
-
-/* { dg-final { scan-tree-dump-times "will be interchanged" 1 "graphite" } } */
-/* { dg-final { cleanup-tree-dump "graphite" } } */
diff -ruN gcc-4.9.2/gcc/testsuite/gcc.dg/graphite/interchange-8.c gcc-4.9.2-test/gcc/testsuite/gcc.dg/graphite/interchange-8.c
--- gcc-4.9.2/gcc/testsuite/gcc.dg/graphite/interchange-8.c	2011-01-25 00:46:31.000000000 -0600
+++ gcc-4.9.2-test/gcc/testsuite/gcc.dg/graphite/interchange-8.c	1969-12-31 18:00:00.000000000 -0600
@@ -1,86 +0,0 @@
-#define DEBUG 0
-#if DEBUG
-#include <stdio.h>
-#endif
-
-int B[4];
-int A[4][4][4][4];
-
-static int __attribute__((noinline))
-foo (void)
-{
-  int i, j, k, l;
-
-  /* Loops (L, J) are interchanged, and then loops (J and K) are
-     interchanged.  The result is a nest starting with (K, J, L).  */
-  for (l = 0; l < 4; l++)
-    {
-      for (k = 0; k < 4; k++)
-	{
-	  for (j = 0; j < 4; j++)
-	    {
-	      for (i = 0; i < 2; i++)
-		{
-		  B[i] = A[i][k][j][l] + A[3 - i][k][j][l];
-		  B[3 - i] = A[i][k][j][l] - A[3 - i][k][j][l];
-		}
-	      A[0][k][j][l] = B[0] + B[1];
-	      A[2][k][j][l] = B[0] - B[1];
-	      A[1][k][j][l] = B[3] + B[2];
-	      A[3][k][j][l] = B[3] - B[2];
-	    }
-
-	  for (i = 0; i < 4; i++)
-	    {
-	      for (j = 0; j < 2; j++)
-		{
-		  B[j] = A[i][k][j][l] + A[i][k][3 - j][l];
-		  B[3 - j] = A[i][k][j][l] - A[i][k][3 - j][l];
-		}
-	      A[i][k][0][l] = B[0] + B[1];
-	      A[i][k][2][l] = B[0] - B[1];
-	      A[i][k][1][l] = B[3] + B[2];
-	      A[i][k][3][l] = B[3] - B[2];
-	    }
-	}
-    }
-
-  return A[0][1][0][2] + A[0][3][0][3] + A[0][2][0][2] + A[0][1][0][1] + A[3][3][0][2];
-}
-
-extern void abort ();
-
-int
-main (void)
-{
-  int i, j, k, l, res;
-
-  for (i = 0; i < 4; i++)
-    B[i] = 2;
-
-  for (i = 0; i < 4; i++)
-    for (j = 0; j < 4; j++)
-      for (k = 0; k < 4; k++)
-	for (l = 0; l < 4; l++)
-	  A[i][j][k][l] = i + j + k + l;
-
-  res = foo ();
-
-#if DEBUG
-  for (i = 0; i < 4; i++)
-    for (j = 0; j < 4; j++)
-      for (k = 0; k < 4; k++)
-	for (l = 0; l < 4; l++)
-	  fprintf (stderr, "A[%d][%d][%d][%d] = %d \n", i, j, k, l, A[i][j][k][l]);
-
-  fprintf (stderr, "res = %d \n", res);
-#endif
-
-  if (res != 424)
-    abort ();
-
-  return 0;
-}
-
-/* { dg-final { scan-tree-dump-times "will be interchanged" 2 "graphite" } } */
-/* { dg-final { cleanup-tree-dump "graphite" } } */
diff -ruN gcc-4.9.2/gcc/testsuite/gcc.dg/torture/pr53366-1.c gcc-4.9.2-test/gcc/testsuite/gcc.dg/torture/pr53366-1.c
--- gcc-4.9.2/gcc/testsuite/gcc.dg/torture/pr53366-1.c	2013-07-22 03:35:18.000000000 -0500
+++ gcc-4.9.2-test/gcc/testsuite/gcc.dg/torture/pr53366-1.c	1969-12-31 18:00:00.000000000 -0600
@@ -1,71 +0,0 @@
-/* PR tree-optimization/53366 */
-/* { dg-do run { target { size32plus } } } */
-/* { dg-require-effective-target size32plus } */
-
-extern void abort (void);
-
-struct S { double v[3]; };
-struct T { struct S r, i; };
-struct U { struct T j[5]; };
-
-void
-foo (struct U *__restrict p1, struct U *__restrict p2,
-     struct S l1, struct S l2, struct S l3, struct S l4,
-     const double _Complex * __restrict x, int y, int z)
-{
-  int i, j;
-  while (y < z - 2)
-    {
-      for (j = 0; j < 5; ++j)
-	{
-	  double a = __real__ x[5 * y + j];
-	  double b = __imag__ x[5 * y + j];
-	  double c = __real__ x[5 * (y + 2) + j];
-	  double d = __imag__ x[5 * (y + 2) + j];
-	  double e = __real__ x[5 * (y + 1) + j];
-	  double f = __imag__ x[5 * (y + 1) + j];
-	  double g = __real__ x[5 * (y + 3) + j];
-	  double h = __imag__ x[5 * (y + 3) + j];
-	  for (i = 0; i < 3; ++i)
-	    {
-	      p1->j[j].r.v[i] += l2.v[i] * a;
-	      p1->j[j].r.v[i] += l4.v[i] * c;
-	      p1->j[j].i.v[i] += l2.v[i] * b;
-	      p1->j[j].i.v[i] += l4.v[i] * d;
-	      p2->j[j].r.v[i] += l3.v[i] * e;
-	      p2->j[j].r.v[i] += l1.v[i] * g;
-	      p2->j[j].i.v[i] += l3.v[i] * f;
-	      p2->j[j].i.v[i] += l1.v[i] * h;
-	    }
-	}
-      y += 4;
-    }
-}
-
-_Complex double x[5005];
-struct U p1, p2;
-
-int
-main ()
-{
-  int i, j;
-  struct S l1, l2, l3, l4;
-  for (i = 0; i < 5005; ++i)
-    x[i] = i + 1.0iF * (2 * i);
-  for (i = 0; i < 3; ++i)
-    {
-      l1.v[i] = 1;
-      l2.v[i] = 2;
-      l3.v[i] = 3;
-      l4.v[i] = 4;
-    }
-  foo (&p1, &p2, l1, l2, l3, l4, x, 5, 1000);
-  for (j = 0; j < 5; ++j)
-    for (i = 0; i < 3; ++i)
-      if (p1.j[j].r.v[i] != 3752430 + j * 1494.0
-	  || p1.j[j].i.v[i] != p1.j[j].r.v[i] * 2
-	  || p2.j[j].r.v[i] != 2502450 + j * 996.0
-	  || p2.j[j].i.v[i] != p2.j[j].r.v[i] * 2)
-	abort ();
-  return 0;
-}
diff -ruN gcc-4.9.2/gcc/testsuite/gfortran.dg/pointer_remapping_5.f08 gcc-4.9.2-test/gcc/testsuite/gfortran.dg/pointer_remapping_5.f08
--- gcc-4.9.2/gcc/testsuite/gfortran.dg/pointer_remapping_5.f08	2010-08-19 11:02:30.000000000 -0500
+++ gcc-4.9.2-test/gcc/testsuite/gfortran.dg/pointer_remapping_5.f08	1969-12-31 18:00:00.000000000 -0600
@@ -1,37 +0,0 @@
-! { dg-do run }
-! { dg-options "-std=f2008 -fall-intrinsics -fcheck=bounds" }
-
-! PR fortran/29785
-! Check pointer rank remapping at runtime.
-
-! Contributed by Daniel Kraft, d@domob.eu.
-
-PROGRAM main
-  IMPLICIT NONE
-  INTEGER, TARGET :: arr(12), basem(3, 4)
-  INTEGER, POINTER :: vec(:), mat(:, :)
-  INTEGER :: i
-
-  arr = (/ (i, i = 1, 12) /)
-  basem = RESHAPE (arr, SHAPE (basem))
-
-  ! We need not necessarily change the rank...
-  vec(2_1:5) => arr(1_1:12_1:2_1)
-  IF (LBOUND (vec, 1) /= 2 .OR. UBOUND (vec, 1) /= 5) CALL abort ()
-  IF (ANY (vec /= (/ 1, 3, 5, 7 /))) CALL abort ()
-  IF (vec(2) /= 1 .OR. vec(5) /= 7) CALL abort ()
-
-  ! ...but it is of course the more interesting.  Also try remapping a pointer.
-  vec => arr(1:12:2)
-  mat(1:3, 1:2) => vec
-  IF (ANY (LBOUND (mat) /= (/ 1, 1 /) .OR. UBOUND (mat) /= (/ 3, 2 /))) &
-    CALL abort ()
-  IF (ANY (mat /= RESHAPE (arr(1:12:2), SHAPE (mat)))) CALL abort ()
-  IF (mat(1, 1) /= 1 .OR. mat(1, 2) /= 7) CALL abort ()
-
-  ! Remap with target of rank > 1.
-  vec(1:12_1) => basem
-  IF (LBOUND (vec, 1) /= 1 .OR. UBOUND (vec, 1) /= 12) CALL abort ()
-  IF (ANY (vec /= arr)) CALL abort ()
-  IF (vec(1) /= 1 .OR. vec(5) /= 5 .OR. vec(12) /= 12) CALL abort ()
-END PROGRAM main
diff -ruN gcc-4.9.4-orig/gcc/testsuite/gcc.dg/graphite/interchange-12.c gcc-4.9.4/gcc/testsuite/gcc.dg/graphite/interchange-12.c
--- gcc-4.9.4-orig/gcc/testsuite/gcc.dg/graphite/interchange-12.c	2017-02-27 20:02:13.352947312 -0600
+++ gcc-4.9.4/gcc/testsuite/gcc.dg/graphite/interchange-12.c	1969-12-31 18:00:00.000000000 -0600
@@ -1,57 +0,0 @@
-/* { dg-require-effective-target size32plus } */
-
-#define DEBUG 0
-#if DEBUG
-#include <stdio.h>
-#endif
-
-#define N 200
-
-int A[N][N], B[N][N], C[N][N];
-
-static int __attribute__((noinline))
-matmult (void)
-{
-  int i, j, k;
-
-  /* Loops J and K should be interchanged.  */
-  for (i = 0; i < N; i++)
-    for (j = 0; j < N; j++)
-      {
-        A[i][j] = 0;
-        for (k = 0; k < N; k++)
-          A[i][j] += B[i][k] * C[k][j];
-      }
-
-  return A[0][0] + A[N-1][N-1];
-}
-
-extern void abort ();
-
-int
-main (void)
-{
-  int i, j, res;
-
-  for (i = 0; i < N; i++)
-    for (j = 0; j < N; j++)
-      {
-	A[i][j] = 0;
-	B[i][j] = i - j;
-	C[i][j] = i + j;
-      }
-
-  res = matmult ();
-
-#if DEBUG
-  fprintf (stderr, "res = %d \n", res);
-#endif
-
-  if (res != 2626800)
-    abort ();
-
-  return 0;
-}
-
-/* { dg-final { scan-tree-dump-times "will be interchanged" 1 "graphite" { xfail *-*-* } } } */
-/* { dg-final { cleanup-tree-dump "graphite" } } */
diff -ruN gcc-4.9.4-orig/gcc/testsuite/gcc.dg/graphite/interchange-14.c gcc-4.9.4/gcc/testsuite/gcc.dg/graphite/interchange-14.c
--- gcc-4.9.4-orig/gcc/testsuite/gcc.dg/graphite/interchange-14.c	2017-02-27 20:02:13.358947312 -0600
+++ gcc-4.9.4/gcc/testsuite/gcc.dg/graphite/interchange-14.c	1969-12-31 18:00:00.000000000 -0600
@@ -1,59 +0,0 @@
-/* { dg-require-effective-target size32plus } */
-
-#define DEBUG 0
-#if DEBUG
-#include <stdio.h>
-#endif
-
-#define N 200
-
-int A[N][N], B[N][N], C[N][N];
-
-static void __attribute__((noinline))
-matmult (void)
-{
-  int i, j, k;
-
-  for (i = 0; i < N; i++)
-    for (j = 0; j < N; j++)
-      A[i][j] = 0;
-
-  /* Loops J and K should be interchanged.  */
-  for (i = 0; i < N; i++)
-    for (j = 0; j < N; j++)
-      for (k = 0; k < N; k++)
-	A[i][j] += B[i][k] * C[k][j];
-}
-
-extern void abort ();
-
-int
-main (void)
-{
-  int i, j, res = 0;
-
-  for (i = 0; i < N; i++)
-    for (j = 0; j < N; j++)
-      {
-	B[i][j] = j;
-	C[i][j] = i;
-      }
-
-  matmult ();
-
-  for (i = 0; i < N; i++)
-    res += A[i][i];
-
-#if DEBUG
-  fprintf (stderr, "res = %d \n", res);
-#endif
-
-  if (res != 529340000)
-    abort ();
-
-  return 0;
-}
-
-/* PRE destroys the perfect nest and we can't cope with that yet.  */
-/* { dg-final { scan-tree-dump-times "will be interchanged" 1 "graphite" { xfail *-*-* } } } */
-/* { dg-final { cleanup-tree-dump "graphite" } } */
diff -ruN gcc-4.9.4-orig/gcc/testsuite/gcc.dg/graphite/interchange-15.c gcc-4.9.4/gcc/testsuite/gcc.dg/graphite/interchange-15.c
--- gcc-4.9.4-orig/gcc/testsuite/gcc.dg/graphite/interchange-15.c	2017-02-27 20:02:13.300947313 -0600
+++ gcc-4.9.4/gcc/testsuite/gcc.dg/graphite/interchange-15.c	1969-12-31 18:00:00.000000000 -0600
@@ -1,54 +0,0 @@
-/* { dg-require-effective-target size32plus } */
-
-#define DEBUG 0
-#if DEBUG
-#include <stdio.h>
-#endif
-
-#define NMAX 2000
-
-static int x[NMAX], a[NMAX][NMAX];
-
-static int __attribute__((noinline))
-mvt (long N)
-{
-  int i,j;
-
-  /* These two loops should be interchanged.  */
-  for (i = 0; i < N; i++)
-    for (j = 0; j < N; j++)
-      x[i] += a[j][i];
-
-  return x[1];
-}
-
-extern void abort ();
-
-int
-main (void)
-{
-  int i, j, res;
-
-  for (i = 0; i < NMAX; i++)
-    for (j = 0; j < NMAX; j++)
-      a[i][j] = j;
-
-  for (i = 0; i < NMAX; i++)
-    x[i] = i;
-
-  res = mvt (NMAX);
-
-#if DEBUG
-  fprintf (stderr, "res = %d \n", res);
-#endif
-
-  if (res != 2001)
-    abort ();
-
-  return 0;
-}
-
-/* PRE destroys the perfect nest and we can't cope with that yet.  */
-/* { dg-final { scan-tree-dump-times "will be interchanged" 1 "graphite" { xfail *-*-* } } } */
-/* { dg-final { cleanup-tree-dump "graphite" } } */
-
diff -ruN gcc-4.9.4-orig/gcc/testsuite/gcc.dg/graphite/interchange-9.c gcc-4.9.4/gcc/testsuite/gcc.dg/graphite/interchange-9.c
--- gcc-4.9.4-orig/gcc/testsuite/gcc.dg/graphite/interchange-9.c	2017-02-27 20:02:13.337947312 -0600
+++ gcc-4.9.4/gcc/testsuite/gcc.dg/graphite/interchange-9.c	1969-12-31 18:00:00.000000000 -0600
@@ -1,48 +0,0 @@
-/* { dg-require-effective-target size32plus } */
-
-#define DEBUG 0
-#if DEBUG
-#include <stdio.h>
-#endif
-
-#define N 111
-#define M 111
-
-static int __attribute__((noinline))
-foo (int *x)
-{
-  int i, j;
-  int sum = 0;
-
-  for (j = 0; j < M; ++j)
-    for (i = 0;  i < N; ++i)
-      sum += x[M * i + j];
-
-  return sum;
-}
-
-extern void abort ();
-
-int
-main (void)
-{
-  int A[N*M];
-  int i, res;
-
-  for (i = 0; i < N*M; i++)
-    A[i] = 2;
-
-  res = foo (A);
-
-#if DEBUG
-  fprintf (stderr, "res = %d \n", res);
-#endif
-
-  if (res != 24642)
-    abort ();
-
-  return 0;
-}
-
-/* { dg-final { scan-tree-dump-times "will be interchanged" 1 "graphite" { xfail *-*-* } } } */
-/* { dg-final { cleanup-tree-dump "graphite" } } */
diff -ruN gcc-4.9.4-orig/gcc/testsuite/gcc.dg/graphite/interchange-mvt.c gcc-4.9.4/gcc/testsuite/gcc.dg/graphite/interchange-mvt.c
--- gcc-4.9.4-orig/gcc/testsuite/gcc.dg/graphite/interchange-mvt.c	2017-02-27 20:02:13.357947312 -0600
+++ gcc-4.9.4/gcc/testsuite/gcc.dg/graphite/interchange-mvt.c	1969-12-31 18:00:00.000000000 -0600
@@ -1,64 +0,0 @@
-/* { dg-require-effective-target size32plus } */
-
-#define DEBUG 0
-#if DEBUG
-#include <stdio.h>
-#endif
-
-#define NMAX 2000
-
-static int x1[NMAX], x2[NMAX], a[NMAX][NMAX], y1[NMAX], y2[NMAX];
-
-static int __attribute__((noinline))
-mvt (long N)
-{
-
-  int i,j;
-
-  for (i = 0; i < N; i++)
-    for (j = 0; j < N; j++)
-      x1[i] = x1[i] + a[i][j] * y1[j];
-
-  /* These two loops should be interchanged.  */
-  for (i = 0; i < N; i++)
-    for (j = 0; j < N; j++)
-      x2[i] = x2[i] + a[j][i] * y2[j];
-
-  return x1[0] + x2[0];
-}
-
-extern void abort ();
-
-int
-main (void)
-{
-  int i, j, res;
-
-  for (i = 0; i < NMAX; i++)
-    for (j = 0; j < NMAX; j++)
-      a[i][j] = i + j;
-
-  for (i = 0; i < NMAX; i++)
-    {
-      x1[i] = 0;
-      x2[i] = 2*i;
-      y1[i] = 100 - i;
-      y2[i] = i;
-    }
-
-  res = mvt (NMAX);
-
-#if DEBUG
-  fprintf (stderr, "res = %d \n", res);
-#endif
-
-  if (res != 199900000)
-    abort ();
-
-  return 0;
-}
-
-/* PRE destroys the perfect nest and we can't cope with that yet.  */
-/* { dg-final { scan-tree-dump-times "will be interchanged" 1 "graphite" { xfail *-*-* } } } */
-/* { dg-final { cleanup-tree-dump "graphite" } } */
-
diff -ruN gcc-4.9.4-orig/gcc/testsuite/gfortran.dg/pr65450.f90 gcc-4.9.4/gcc/testsuite/gfortran.dg/pr65450.f90
--- gcc-4.9.4-orig/gcc/testsuite/gfortran.dg/pr65450.f90	2017-02-27 20:02:16.337947260 -0600
+++ gcc-4.9.4/gcc/testsuite/gfortran.dg/pr65450.f90	1969-12-31 18:00:00.000000000 -0600
@@ -1,35 +0,0 @@
-! PR tree-optimization/65450
-! { dg-do run }
-! { dg-additional-options "-mtune=amdfam10" { target x86_64-*-* i?86-*-* } }
-
-program pr65450
-  integer :: n, m, o, i, k
-  double precision :: u(500,60,3), h(500,60,3)
-  double precision :: v(500,60)
-  u = 0
-  h = 0
-  o = 1
-  m = 2
-  n = 3
-  do k = 1, 50
-    v = foo (u(:,:,m))
-    u(2:499,1:60,n) = u(2:499,1:60,o)+16.d0
-    h(1:500,2:59,n) = h(1:500,2:59,o)-4.d0*v(1:500,2:59)-32.0d0
-    i = o
-    o = m
-    m = n
-    n = i
-  end do
-  if (abs (v(17, 23) + h(17, 23, 2) + 768.0d0) > 0.5d0) call abort
-contains
-  function foo(a)
-    double precision :: a(:,:)
-    double precision :: foo(size(a,dim=1),size(a,dim=2))
-    integer :: i, j
-    i = size(a,dim=1)
-    j = size(a,dim=2)
-    foo(2:i-1,1:j) = a(3:i,1:j)-a(1:i-2,1:j)
-    foo(1,1:j) = 2*(a(2,1:j)-a(1,1:j))
-    foo(i,1:j) = 2*(a(i,1:j)-a(i-1,1:j))
-  end function foo
-end program pr65450

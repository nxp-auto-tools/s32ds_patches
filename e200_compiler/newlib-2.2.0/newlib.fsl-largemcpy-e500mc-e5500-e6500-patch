diff -ruN newlib-2.2.0-mcpy-new-large-original/newlib/libc/include/string.h newlib-2.2.0-mcpy-new-large-mcpy-new/newlib/libc/include/string.h
--- newlib-2.2.0-mcpy-new-large-original/newlib/libc/include/string.h	2015-09-02 14:39:22.936187000 -0500
+++ newlib-2.2.0-mcpy-new-large-mcpy-new/newlib/libc/include/string.h	2015-09-02 14:39:34.385187000 -0500
@@ -21,6 +21,9 @@
 _PTR 	 _EXFUN(memchr,(const _PTR, int, size_t));
 int 	 _EXFUN(memcmp,(const _PTR, const _PTR, size_t));
 _PTR 	 _EXFUN(memcpy,(_PTR __restrict, const _PTR __restrict, size_t));
+#ifdef __powerpc__
+_PTR 	 _EXFUN(largememcpy,(_PTR __restrict, const _PTR __restrict, size_t));
+#endif
 _PTR	 _EXFUN(memmove,(_PTR, const _PTR, size_t));
 _PTR	 _EXFUN(memset,(_PTR, int, size_t));
 char 	*_EXFUN(strcat,(char *__restrict, const char *__restrict));
diff -ruN newlib-2.2.0-mcpy-new-large-original/newlib/libc/machine/powerpc/e500mc/largememcpy.S newlib-2.2.0-mcpy-new-large-mcpy-new/newlib/libc/machine/powerpc/e500mc/largememcpy.S
--- newlib-2.2.0-mcpy-new-large-original/newlib/libc/machine/powerpc/e500mc/largememcpy.S	1969-12-31 18:00:00.000000000 -0600
+++ newlib-2.2.0-mcpy-new-large-mcpy-new/newlib/libc/machine/powerpc/e500mc/largememcpy.S	2015-09-02 15:05:18.440186886 -0500
@@ -0,0 +1,350 @@
+/* Optimized largememcpy implementation for e500mc 32-bit PowerPC.
+   This version uses cache management instructions.  */
+
+#include <powerpc/asm.h>
+
+/* _PTR [r3] largememcpy 
+   (_PTR __restrict dst [r3], const _PTR __restrict src [r4], size_t len [r5]);
+   Returns 'dst'.
+
+	 r3 = destination
+	 r4 = source
+	 r5 = byte count
+
+	 volatile fixed point registers usable:
+	 r0, r3-r12
+
+	 volatile floating point registers usable:
+	 f0-f13.  */
+
+FUNC_START (largememcpy)
+	cmplw	cr0, r4, r3		/* if source==destination, return.  */
+	beqlr	cr0
+	/* if number of bytes is less than 8 (optimal value TBD),
+	   but greater than zero, copy byte-by-byte.  */
+	cmplwi	r5, 8
+	mr	r6, r3
+	blt	L(copy_bytes)
+	neg	r0, r4
+	andi.	r11, r0, 3
+	beq	L(src_aligned4)
+        /* We have to align the src pointer by r11 bytes */
+	cmplwi  cr0, r11, 1
+	ble     L(src_1)
+	/* 2 or 3 bytes */
+	addi    r8, r11, -2
+	lhz     r9, 0(r4)
+	lhzx    r12, r4, r8
+	sth     r9, 0(r6)
+	sthx    r12, r6, r8
+	b       L(src_0)
+L(src_1):
+	lbz     r8, 0(r4)
+	stb     r8, 0(r6)
+L(src_0):
+	subf	r5, r11, r5
+	add	r4, r4, r11
+	add	r6, r6, r11
+L(src_aligned4):
+	cmplwi	7, r5, 63
+	ble	7, L(copy_remaining)
+	andi.	r10, r0, 63
+	beq	L(src_aligned64)
+	subf.	r10, r11, r10
+	beq	0, L(src_aligned64)
+	srwi	r11, r10, 2
+	subf	r5, r10, r5
+	mtctr	r11
+L(copy_salign4):
+	lwz	0, 0(r4)
+	addi	r4, r4, 4
+	stw	0, 0(r6)
+	addi	r6, r6, 4
+	bdnz	L(copy_salign4)
+L(src_aligned64):
+	srwi.	r11, r5, 6		/* No of 64 byte copy count.  */
+	beq	0, L(copy_remaining)
+	rlwinm	r5, r5, 0, 26, 31	/* remaining bytes.  */
+	rlwinm.	r0, r6, 0, 29, 31
+	bne	0, L(src_dnalign)
+	cmplwi	7, r11, 256
+	ble	7, L(label1)
+	addi	r7, r11, -256
+	mtctr	r7
+	li	r10, 256
+	li	r12, 64
+L(lcopy_dalign):
+	dcbt	r10, r4
+	dcbzl	r12, r6
+#ifndef _SOFT_FLOAT
+	lfd	0, 0(r4)
+	lfd	1, 8(r4)
+	lfd	2, 16(r4)
+	lfd	3, 24(r4)
+	lfd	4, 32(r4)
+	lfd	5, 40(r4)
+	lfd	6, 48(r4)
+	lfd	7, 56(r4)
+	stfd	0, 0(r6)
+	stfd	1, 8(r6)
+	stfd	2, 16(r6)
+	stfd	3, 24(r6)
+	addi	r4, r4, 64
+	stfd	4, 32(r6)
+	stfd	5, 40(r6)
+	stfd	6, 48(r6)
+	stfd	7, 56(r6)
+#else
+	lwz	r0, 0(r4)
+	lwz	r8, 4(r4)
+	lwz	r9, 8(r4)
+	stw	r0, 0(r6)
+	stw	r8, 4(r6)
+	stw	r9, 8(r6)
+	lwz	r0, 12(r4)
+	lwz	r8, 16(r4)
+	lwz	r9, 20(r4)
+	stw	r0, 12(r6)
+	stw	r8, 16(r6)
+	stw	r9, 20(r6)
+	lwz	r0, 24(r4)
+	lwz	r8, 28(r4)
+	lwz	r9, 32(r4)
+	stw	r0, 24(r6)
+	stw	r8, 28(r6)
+	stw	r9, 32(r6)
+	lwz	r0, 36(r4)
+	lwz	r8, 40(r4)
+	lwz	r9, 44(r4)
+	stw	r0, 36(r6)
+	stw	r8, 40(r6)
+	stw	r9, 44(r6)
+	lwz	r0, 48(r4)
+	lwz	r8, 52(r4)
+	lwz	r9, 56(r4)
+	stw	r0, 48(r6)
+	lwz	r0, 60(r4)
+	addi	r4, r4, 64
+	stw	r8, 52(r6)
+	stw	r9, 56(r6)
+	stw	r0, 60(r6)
+#endif
+	dcbf	0, r6
+	addi	r6, r6, 64
+	bdnz	L(lcopy_dalign)
+	subf	r11, r7, r11
+L(label1):
+	mtctr	r11
+L(copy_dalign):
+#ifndef _SOFT_FLOAT
+	lfd	0, 0(r4)
+	lfd	1, 8(r4)
+	lfd	2, 16(r4)
+	lfd	3, 24(r4)
+	stfd	0, 0(r6)
+	stfd	1, 8(r6)
+	stfd	2, 16(r6)
+	stfd	3, 24(r6)
+	lfd	0, 32(r4)
+	lfd	1, 40(r4)
+	lfd	2, 48(r4)
+	lfd	3, 56(r4)
+	addi	r4, r4, 64
+	stfd	0, 32(r6)
+	stfd	1, 40(r6)
+	stfd	2, 48(r6)
+	stfd	3, 56(r6)
+#else
+	lwz	r0, 0(r4)
+	lwz	r8, 4(r4)
+	lwz	r9, 8(r4)
+	stw	r0, 0(r6)
+	stw	r8, 4(r6)
+	stw	r9, 8(r6)
+	lwz	r0, 12(r4)
+	lwz	r8, 16(r4)
+	lwz	r9, 20(r4)
+	stw	r0, 12(r6)
+	stw	r8, 16(r6)
+	stw	r9, 20(r6)
+	lwz	r0, 24(r4)
+	lwz	r8, 28(r4)
+	lwz	r9, 32(r4)
+	stw	r0, 24(r6)
+	stw	r8, 28(r6)
+	stw	r9, 32(r6)
+	lwz	r0, 36(r4)
+	lwz	r8, 40(r4)
+	lwz	r9, 44(r4)
+	stw	r0, 36(r6)
+	stw	r8, 40(r6)
+	stw	r9, 44(r6)
+	lwz	r0, 48(r4)
+	lwz	r8, 52(r4)
+	lwz	r9, 56(r4)
+	stw	r0, 48(r6)
+	lwz	r0, 60(r4)
+	addi	r4, r4, 64
+	stw	r8, 52(r6)
+	stw	r9, 56(r6)
+	stw	r0, 60(r6)
+#endif
+	addi	r6, r6, 64
+	bdnz	L(copy_dalign)
+L(copy_remaining):
+	srwi.	r11, r5, 3		/* No of 8 byte copy count.  */
+	rlwinm	r5, r5, 0, 29, 31	/* remaining bytes.  */
+	beq	0, L(copy_bytes)
+	mtcrf	0x01, r11
+	bf	cr7*4+1, L(cp16b)
+	lwz	r0, 0(r4)		/* copy 32 bytes.  */
+	lwz	r8, 4(r4)
+	lwz	r9, 8(r4)
+	stw	r0, 0(r6)
+	stw	r8, 4(r6)
+	stw	r9, 8(r6)
+	lwz	r0, 12(r4)
+	lwz	r8, 16(r4)
+	lwz	r9, 20(r4)
+	stw	r0, 12(r6)
+	stw	r8, 16(r6)
+	lwz	r0, 24(r4)
+	lwz	r8, 28(r4)
+	addi	r4, r4, 32
+	stw	r9, 20(r6)
+	stw	r0, 24(r6)
+	stw	r8, 28(r6)
+	addi	r6, r6, 32
+L(cp16b):
+	bf	cr7*4+2, L(cp8b)
+	lwz	r0, 0(r4)		/* copy 16 bytes.  */
+	lwz	r7, 4(r4)
+	lwz	r8, 8(r4)
+	lwz	r9, 12(r4)
+	addi	r4, r4, 16
+	stw	r0, 0(r6)
+	stw	r7, 4(r6)
+	stw	r8, 8(r6)
+	stw	r9, 12(r6)
+	addi	r6, r6, 16
+L(cp8b):
+	bf	cr7*4+3, L(copy_bytes)
+	lwz	r0, 0(r4)		/* copy 8 bytes.  */
+	lwz	r7, 4(r4)
+	addi	r4, r4, 8
+	stw	r0, 0(r6)
+	stw	r7, 4(r6)
+	addi	r6, r6, 8
+L(copy_bytes):
+	cmplwi	cr1, r5, 4
+	cmplwi	cr0, r5, 1
+	bgt	cr1, L(gt4b)		/* nb > 4?  (5, 6, 7 bytes).  */
+	ble	cr0, L(lt1b)		/* nb <= 1? (0, 1 bytes).  */
+	addi	r0, r5, -2		/* 2, 3, 4 bytes.  */
+	lhz	r9, 0(r4)
+	lhzx	r11, r4, r0
+	sth	r9, 0(r6)
+	sthx	r11, r6, r0
+	blr
+L(gt4b):
+	addi	r0, r5, -4		/* 5, 6, 7 bytes.  */
+	lwz	r9, 0(r4)
+	lwzx	r11, r4, r0
+	stw	r9, 0(r6)
+	stwx	r11, r6, r0
+	blr
+L(lt1b):
+	mtocrf	0x1, r5			/* nb == 0 ? return.  */
+	bflr	31
+	lbz	r0, 0(r4)		/* nb == 1.  */
+	stb	r0, 0(r6)
+	blr
+
+L(src_dnalign):
+	cmplwi	7, r11, 256
+	ble	7, L(label2)
+	addi	r7, r11, -256
+	mtctr	r7
+	li	r10, 256
+	li	r12, 64
+L(lcopy_dnalign):
+	dcbt	r10, r4
+	dcbzl	r12, r6
+	lwz	r0, 0(r4)		/* copy 64 bytes.  */
+	lwz	r8, 4(r4)
+	lwz	r9, 8(r4)
+	stw	r0, 0(r6)
+	stw	r8, 4(r6)
+	stw	r9, 8(r6)
+	lwz	r0, 12(r4)
+	lwz	r8, 16(r4)
+	lwz	r9, 20(r4)
+	stw	r0, 12(r6)
+	stw	r8, 16(r6)
+	stw	r9, 20(r6)
+	lwz	r0, 24(r4)
+	lwz	r8, 28(r4)
+	lwz	r9, 32(r4)
+	stw	r0, 24(r6)
+	stw	r8, 28(r6)
+	stw	r9, 32(r6)
+	lwz	r0, 36(r4)
+	lwz	r8, 40(r4)
+	lwz	r9, 44(r4)
+	stw	r0, 36(r6)
+	stw	r8, 40(r6)
+	stw	r9, 44(r6)
+	lwz	r0, 48(r4)
+	lwz	r8, 52(r4)
+	lwz	r9, 56(r4)
+	stw	r0, 48(r6)
+	lwz	r0, 60(r4)
+	addi	r4, r4, 64
+	stw	r8, 52(r6)
+	stw	r9, 56(r6)
+	stw	r0, 60(r6)
+	dcbf	0, r6
+	addi	r6, r6, 64
+	bdnz	L(lcopy_dnalign)
+	li	r11, 256
+L(label2):
+	mtctr	r11
+L(copy_dnalign):
+	lwz	r0, 0(r4)		/* copy 64 bytes.  */
+	lwz	r8, 4(r4)
+	lwz	r9, 8(r4)
+	stw	r0, 0(r6)
+	stw	r8, 4(r6)
+	stw	r9, 8(r6)
+	lwz	r0, 12(r4)
+	lwz	r8, 16(r4)
+	lwz	r9, 20(r4)
+	stw	r0, 12(r6)
+	stw	r8, 16(r6)
+	stw	r9, 20(r6)
+	lwz	r0, 24(r4)
+	lwz	r8, 28(r4)
+	lwz	r9, 32(r4)
+	stw	r0, 24(r6)
+	stw	r8, 28(r6)
+	stw	r9, 32(r6)
+	lwz	r0, 36(r4)
+	lwz	r8, 40(r4)
+	lwz	r9, 44(r4)
+	stw	r0, 36(r6)
+	stw	r8, 40(r6)
+	stw	r9, 44(r6)
+	lwz	r0, 48(r4)
+	lwz	r8, 52(r4)
+	lwz	r9, 56(r4)
+	stw	r0, 48(r6)
+	lwz	r0, 60(r4)
+	addi	r4, r4, 64
+	stw	r8, 52(r6)
+	stw	r9, 56(r6)
+	stw	r0, 60(r6)
+	addi	r6, r6, 64
+	bdnz	L(copy_dnalign)
+	b	L(copy_remaining)
+
+FUNC_END (largememcpy)
diff -ruN newlib-2.2.0-mcpy-new-large-original/newlib/libc/machine/powerpc/e5500/32-bit/memcpy.S newlib-2.2.0-mcpy-new-large-mcpy-new/newlib/libc/machine/powerpc/e5500/32-bit/memcpy.S
--- newlib-2.2.0-mcpy-new-large-original/newlib/libc/machine/powerpc/e5500/32-bit/memcpy.S	2015-09-02 14:39:22.991187000 -0500
+++ newlib-2.2.0-mcpy-new-large-mcpy-new/newlib/libc/machine/powerpc/e5500/32-bit/memcpy.S	2015-09-02 14:39:34.441187000 -0500
@@ -233,3 +233,4 @@
 	b	L(copy_remaining)
 
 FUNC_END (memcpy)
+weak_alias (memcpy, largememcpy)
diff -ruN newlib-2.2.0-mcpy-new-large-original/newlib/libc/machine/powerpc/e5500/64-bit/largememcpy.S newlib-2.2.0-mcpy-new-large-mcpy-new/newlib/libc/machine/powerpc/e5500/64-bit/largememcpy.S
--- newlib-2.2.0-mcpy-new-large-original/newlib/libc/machine/powerpc/e5500/64-bit/largememcpy.S	1969-12-31 18:00:00.000000000 -0600
+++ newlib-2.2.0-mcpy-new-large-mcpy-new/newlib/libc/machine/powerpc/e5500/64-bit/largememcpy.S	2015-09-02 15:06:15.970187303 -0500
@@ -0,0 +1,192 @@
+/* Optimized largememcpy implementation for e5500 64-bit PowerPC64.
+   This version uses cache management instructions.  */
+
+#include <powerpc/asm.h>
+
+/* _PTR [r3] largememcpy 
+   (_PTR __restrict dst [r3], const _PTR __restrict src [r4], size_t len [r5]);
+   Returns 'dst'.
+
+	 r3 = destination
+	 r4 = source
+	 r5 = byte count
+
+	 volatile fixed point registers usable:
+	 r0, r3-r12
+
+	 volatile floating point registers usable:
+	 f0-f13.  */
+
+FUNC_START (largememcpy)
+	cmpld	cr0, r4, r3		/* if source==destination, return.  */
+	beqlr	cr0
+	/* if number of bytes is less than 8, (optimal value TBD),
+	   but greater than zero copy byte-by-byte.  */
+	cmpldi	r5, 8
+	mr	r6, r3
+	blt	L(copy_bytes)
+	neg	r0, r4
+	andi.	r11, r0, 7
+	beq	L(src_aligned)
+	/* We have to align the src pointer by r11 bytes */
+	cmplwi	cr1, r11, 4
+	cmplwi	cr0, r11, 1
+	bgt	cr1, L(src_567)
+	ble	cr0, L(src_1)
+	/* 2, 3 or 4 bytes */
+	addi	r0, r11, -2
+	lhz	r9, 0(r4)
+	lhzx	r12, r4, r0
+	sth	r9, 0(r6)
+	sthx	r12, r6, r0
+	b	L(src_0)
+L(src_567):
+	addi	r0, r11, -4
+	lwz	r9, 0(r4)
+	lwzx	r12, r4, r0
+	stw	r9, 0(r6)
+	stwx	r12, r6, r0
+	b	L(src_0)
+L(src_1):
+	lbz	r0, 0(r4)
+	stb	r0, 0(r6)
+L(src_0):
+	subf	r5, r11, r5
+	add	r4, r4, r11
+	add	r6, r6, r11
+L(src_aligned):
+	cmpldi	7, r5, 63
+	ble	7, L(copy_remaining)
+	srwi	r11, r5, 6		/* No of 64 byte copy count.  */
+	rlwinm.	r5, r5, 0, 26, 31	/* remaining bytes.  */
+	cmpldi	7, r11, 256
+	ble	7, L(2)
+	rlwinm.	r0, r6, 0, 28, 31
+	cmpldi	r0, 8
+	addi	r7, r11, -256
+	mtctr	r7
+	ble	L(copy_dnaligned)
+	li	r10, 256
+	li	r12, 64
+L(lcopy_daligned):
+	dcbt	r10, r4
+	dcbzl	r12, r6
+	ld	r0, 0(r4)		/* 64-byte copy.  */
+	ld	r7, 8(r4)
+	ld	r8, 16(r4)
+	ld	r9, 24(r4)
+	std	r0, 0(r6)
+	std	r7, 8(r6)
+	std	r8, 16(r6)
+	std	r9, 24(r6)
+	ld	r0, 32(r4)
+	ld	r7, 40(r4)
+	ld	r8, 48(r4)
+	ld	r9, 56(r4)
+	addi	r4, r4, 64
+	std	r0, 32(r6)
+	std	r7, 40(r6)
+	std	r8, 48(r6)
+	std	r9, 56(r6)
+	dcbf	0, r6
+	addi	r6, r6, 64
+	bdnz	L(lcopy_daligned)
+L(1):	li	r11, 256
+L(2):	mtctr	r11
+L(copy_daligned):
+	ld	r0, 0(r4)
+	ld	r7, 8(r4)
+	ld	r8, 16(r4)
+	ld	r9, 24(r4)
+	std	r0, 0(r6)
+	std	r7, 8(r6)
+	std	r8, 16(r6)
+	std	r9, 24(r6)
+	ld	r0, 32(r4)
+	ld	r7, 40(r4)
+	ld	r8, 48(r4)
+	ld	r9, 56(r4)
+	addi	r4, r4, 64
+	std	r0, 32(r6)
+	std	r7, 40(r6)
+	std	r8, 48(r6)
+	std	r9, 56(r6)
+	addi	r6, r6, 64
+	bdnz	L(copy_daligned)
+L(copy_remaining):
+	srwi.	r11, r5, 3		/* No of 8 byte copy count.  */
+	rlwinm	r5, r5, 0, 29, 31	/* remaining bytes.  */
+	beq	0, L(copy_bytes)
+	mtcrf	0x01, r11
+	bf	cr7*4+1, L(cp16b)
+	ld	r0, 0(r4)		/* copy 32 bytes.  */
+	ld	r7, 8(r4)
+	ld	r8, 16(r4)
+	ld	r9, 24(r4)
+	addi	r4, r4, 32
+	std	r0, 0(r6)
+	std	r7, 8(r6)
+	std	r8, 16(r6)
+	std	r9, 24(r6)
+	addi	r6, r6, 32
+L(cp16b):
+	bf	cr7*4+2, L(cp8b)	/* copy 16 bytes.  */
+	ld	r7, 0(r4)
+	ld	r8, 8(r4)
+	addi	r4, r4, 16
+	std	r7, 0(r6)
+	std	r8, 8(r6)
+	addi	r6, r6, 16
+L(cp8b):
+	bf	cr7*4+3, L(copy_bytes)	/* copy 8 bytes.  */
+	ld	r7, 0(r4)
+	addi	r4, r4, 8
+	std	r7, 0(r6)
+	addi	r6, r6, 8
+L(copy_bytes):
+	cmpldi	cr1, r5, 4
+	cmpldi	cr0, r5, 1
+	bgt	cr1, L(gt4b)		/* nb > 4?  (5, 6, 7 bytes).  */
+	ble	cr0, L(lt1b)		/* nb <= 1? (0, 1 bytes).  */
+	addi	r0, r5, -2		/* 2, 3, 4 bytes.  */
+	lhz	r9, 0(r4)
+	lhzx	r11, r4, r0
+	sth	r9, 0(r6)
+	sthx	r11, r6, r0
+	blr
+L(gt4b):
+	addi	r0, r5, -4		/* 5, 6, 7 bytes.  */
+	lwz	r9, 0(r4)
+	lwzx	r11, r4, r0
+	stw	r9, 0(r6)
+	stwx	r11, r6, r0
+	blr
+L(lt1b):
+	mtocrf	0x1, r5			/* nb == 0 ? return.  */
+	bflr	31
+	lbz	r0, 0(r4)		/* nb == 1.  */
+	stb	r0, 0(r6)
+	blr
+L(copy_dnaligned):
+	ld	r0, 0(r4)
+	ld	r7, 8(r4)
+	ld	r8, 16(r4)
+	ld	r9, 24(r4)
+	std	r0, 0(r6)
+	std	r7, 8(r6)
+	std	r8, 16(r6)
+	std	r9, 24(r6)
+	ld	r0, 32(r4)
+	ld	r7, 40(r4)
+	ld	r8, 48(r4)
+	ld	r9, 56(r4)
+	addi	r4, r4, 64
+	std	r0, 32(r6)
+	std	r7, 40(r6)
+	std	r8, 48(r6)
+	std	r9, 56(r6)
+	addi	r6, r6, 64
+	bdnz	L(copy_dnaligned)
+	b	L(1)
+
+FUNC_END (largememcpy)
diff -ruN newlib-2.2.0-mcpy-new-large-original/newlib/libc/machine/powerpc/e6500/32-bit/memcpy.S newlib-2.2.0-mcpy-new-large-mcpy-new/newlib/libc/machine/powerpc/e6500/32-bit/memcpy.S
--- newlib-2.2.0-mcpy-new-large-original/newlib/libc/machine/powerpc/e6500/32-bit/memcpy.S	2015-09-02 14:39:22.992187000 -0500
+++ newlib-2.2.0-mcpy-new-large-mcpy-new/newlib/libc/machine/powerpc/e6500/32-bit/memcpy.S	2015-09-02 14:39:34.442187000 -0500
@@ -220,3 +220,4 @@
 #endif
 
 FUNC_END (memcpy)
+weak_alias (memcpy, largememcpy)
diff -ruN newlib-2.2.0-mcpy-new-large-original/newlib/libc/machine/powerpc/e6500/64-bit/memcpy.S newlib-2.2.0-mcpy-new-large-mcpy-new/newlib/libc/machine/powerpc/e6500/64-bit/memcpy.S
--- newlib-2.2.0-mcpy-new-large-original/newlib/libc/machine/powerpc/e6500/64-bit/memcpy.S	2015-09-02 14:39:22.992187000 -0500
+++ newlib-2.2.0-mcpy-new-large-mcpy-new/newlib/libc/machine/powerpc/e6500/64-bit/memcpy.S	2015-09-02 14:39:34.442187000 -0500
@@ -193,3 +193,4 @@
 	b	L(copy_remaining)
 
 FUNC_END (memcpy)
+weak_alias (memcpy, largememcpy)
diff -ruN newlib-2.2.0-mcpy-new-large-original/newlib/libc/machine/powerpc/Makefile.am newlib-2.2.0-mcpy-new-large-mcpy-new/newlib/libc/machine/powerpc/Makefile.am
--- newlib-2.2.0-mcpy-new-large-original/newlib/libc/machine/powerpc/Makefile.am	2015-09-02 14:39:22.989187000 -0500
+++ newlib-2.2.0-mcpy-new-large-mcpy-new/newlib/libc/machine/powerpc/Makefile.am	2015-09-02 14:39:34.439187000 -0500
@@ -13,11 +13,11 @@
 lib_a_SOURCES = setjmp.S
 
 if E500MC
-lib_a_SOURCES += e500mc/memcpy.S
+lib_a_SOURCES += e500mc/memcpy.S e500mc/largememcpy.S
 else		#E500MC else
 if E5500
 if TARGET_64
-lib_a_SOURCES += e5500/64-bit/memcpy.S
+lib_a_SOURCES += e5500/64-bit/memcpy.S e5500/64-bit/largememcpy.S
 else		#E5500 TARGET_64 else
 lib_a_SOURCES += e5500/32-bit/memcpy.S
 endif		#E5500 TARGET_64
diff -ruN newlib-2.2.0-mcpy-new-large-original/newlib/libc/machine/powerpc/Makefile.in newlib-2.2.0-mcpy-new-large-mcpy-new/newlib/libc/machine/powerpc/Makefile.in
--- newlib-2.2.0-mcpy-new-large-original/newlib/libc/machine/powerpc/Makefile.in	2015-09-02 14:39:22.991187000 -0500
+++ newlib-2.2.0-mcpy-new-large-mcpy-new/newlib/libc/machine/powerpc/Makefile.in	2015-09-02 14:39:34.441187000 -0500
@@ -51,8 +51,8 @@
 POST_UNINSTALL = :
 build_triplet = @build@
 host_triplet = @host@
-@E500MC_TRUE@am__append_1 = e500mc/memcpy.S
-@E500MC_FALSE@@E5500_TRUE@@TARGET_64_TRUE@am__append_2 = e5500/64-bit/memcpy.S
+@E500MC_TRUE@am__append_1 = e500mc/memcpy.S e500mc/largememcpy.S
+@E500MC_FALSE@@E5500_TRUE@@TARGET_64_TRUE@am__append_2 = e5500/64-bit/memcpy.S e5500/64-bit/largememcpy.S
 @E500MC_FALSE@@E5500_TRUE@@TARGET_64_FALSE@am__append_3 = e5500/32-bit/memcpy.S
 @E500MC_FALSE@@E5500_FALSE@@E6500_TRUE@@TARGET_64_TRUE@am__append_4 = e6500/64-bit/memcpy.S
 @E500MC_FALSE@@E5500_FALSE@@E6500_TRUE@@TARGET_64_FALSE@am__append_5 = e6500/32-bit/memcpy.S
@@ -76,8 +76,10 @@
 lib_a_AR = $(AR) $(ARFLAGS)
 lib_a_LIBADD =
 am__dirstamp = $(am__leading_dot)dirstamp
-@E500MC_TRUE@am__objects_1 = e500mc/lib_a-memcpy.$(OBJEXT)
-@E500MC_FALSE@@E5500_TRUE@@TARGET_64_TRUE@am__objects_2 = e5500/64-bit/lib_a-memcpy.$(OBJEXT)
+@E500MC_TRUE@am__objects_1 = e500mc/lib_a-memcpy.$(OBJEXT) \
+@E500MC_TRUE@	e500mc/lib_a-largememcpy.$(OBJEXT)
+@E500MC_FALSE@@E5500_TRUE@@TARGET_64_TRUE@am__objects_2 = e5500/64-bit/lib_a-memcpy.$(OBJEXT) \
+@E500MC_FALSE@@E5500_TRUE@@TARGET_64_TRUE@	e5500/64-bit/lib_a-largememcpy.$(OBJEXT)
 @E500MC_FALSE@@E5500_TRUE@@TARGET_64_FALSE@am__objects_3 = e5500/32-bit/lib_a-memcpy.$(OBJEXT)
 @E500MC_FALSE@@E5500_FALSE@@E6500_TRUE@@TARGET_64_TRUE@am__objects_4 = e6500/64-bit/lib_a-memcpy.$(OBJEXT)
 @E500MC_FALSE@@E5500_FALSE@@E6500_TRUE@@TARGET_64_FALSE@am__objects_5 = e6500/32-bit/lib_a-memcpy.$(OBJEXT)
@@ -271,10 +273,13 @@
 	@$(MKDIR_P) e500mc
 	@: > e500mc/$(am__dirstamp)
 e500mc/lib_a-memcpy.$(OBJEXT): e500mc/$(am__dirstamp)
+e500mc/lib_a-largememcpy.$(OBJEXT): e500mc/$(am__dirstamp)
 e5500/64-bit/$(am__dirstamp):
 	@$(MKDIR_P) e5500/64-bit
 	@: > e5500/64-bit/$(am__dirstamp)
 e5500/64-bit/lib_a-memcpy.$(OBJEXT): e5500/64-bit/$(am__dirstamp)
+e5500/64-bit/lib_a-largememcpy.$(OBJEXT):  \
+	e5500/64-bit/$(am__dirstamp)
 e5500/32-bit/$(am__dirstamp):
 	@$(MKDIR_P) e5500/32-bit
 	@: > e5500/32-bit/$(am__dirstamp)
@@ -294,8 +299,10 @@
 
 mostlyclean-compile:
 	-rm -f *.$(OBJEXT)
+	-rm -f e500mc/lib_a-largememcpy.$(OBJEXT)
 	-rm -f e500mc/lib_a-memcpy.$(OBJEXT)
 	-rm -f e5500/32-bit/lib_a-memcpy.$(OBJEXT)
+	-rm -f e5500/64-bit/lib_a-largememcpy.$(OBJEXT)
 	-rm -f e5500/64-bit/lib_a-memcpy.$(OBJEXT)
 	-rm -f e6500/32-bit/lib_a-memcpy.$(OBJEXT)
 	-rm -f e6500/64-bit/lib_a-memcpy.$(OBJEXT)
@@ -321,12 +328,24 @@
 e500mc/lib_a-memcpy.obj: e500mc/memcpy.S
 	$(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CCASFLAGS) $(CCASFLAGS) -c -o e500mc/lib_a-memcpy.obj `if test -f 'e500mc/memcpy.S'; then $(CYGPATH_W) 'e500mc/memcpy.S'; else $(CYGPATH_W) '$(srcdir)/e500mc/memcpy.S'; fi`
 
+e500mc/lib_a-largememcpy.o: e500mc/largememcpy.S
+	$(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CCASFLAGS) $(CCASFLAGS) -c -o e500mc/lib_a-largememcpy.o `test -f 'e500mc/largememcpy.S' || echo '$(srcdir)/'`e500mc/largememcpy.S
+
+e500mc/lib_a-largememcpy.obj: e500mc/largememcpy.S
+	$(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CCASFLAGS) $(CCASFLAGS) -c -o e500mc/lib_a-largememcpy.obj `if test -f 'e500mc/largememcpy.S'; then $(CYGPATH_W) 'e500mc/largememcpy.S'; else $(CYGPATH_W) '$(srcdir)/e500mc/largememcpy.S'; fi`
+
 e5500/64-bit/lib_a-memcpy.o: e5500/64-bit/memcpy.S
 	$(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CCASFLAGS) $(CCASFLAGS) -c -o e5500/64-bit/lib_a-memcpy.o `test -f 'e5500/64-bit/memcpy.S' || echo '$(srcdir)/'`e5500/64-bit/memcpy.S
 
 e5500/64-bit/lib_a-memcpy.obj: e5500/64-bit/memcpy.S
 	$(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CCASFLAGS) $(CCASFLAGS) -c -o e5500/64-bit/lib_a-memcpy.obj `if test -f 'e5500/64-bit/memcpy.S'; then $(CYGPATH_W) 'e5500/64-bit/memcpy.S'; else $(CYGPATH_W) '$(srcdir)/e5500/64-bit/memcpy.S'; fi`
 
+e5500/64-bit/lib_a-largememcpy.o: e5500/64-bit/largememcpy.S
+	$(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CCASFLAGS) $(CCASFLAGS) -c -o e5500/64-bit/lib_a-largememcpy.o `test -f 'e5500/64-bit/largememcpy.S' || echo '$(srcdir)/'`e5500/64-bit/largememcpy.S
+
+e5500/64-bit/lib_a-largememcpy.obj: e5500/64-bit/largememcpy.S
+	$(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CCASFLAGS) $(CCASFLAGS) -c -o e5500/64-bit/lib_a-largememcpy.obj `if test -f 'e5500/64-bit/largememcpy.S'; then $(CYGPATH_W) 'e5500/64-bit/largememcpy.S'; else $(CYGPATH_W) '$(srcdir)/e5500/64-bit/largememcpy.S'; fi`
+
 e5500/32-bit/lib_a-memcpy.o: e5500/32-bit/memcpy.S
 	$(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CCASFLAGS) $(CCASFLAGS) -c -o e5500/32-bit/lib_a-memcpy.o `test -f 'e5500/32-bit/memcpy.S' || echo '$(srcdir)/'`e5500/32-bit/memcpy.S
 
diff -ruN newlib-2.2.0-mcpy-new-large-original/newlib/libc/machine/powerpc/memcpy.c newlib-2.2.0-mcpy-new-large-mcpy-new/newlib/libc/machine/powerpc/memcpy.c
--- newlib-2.2.0-mcpy-new-large-original/newlib/libc/machine/powerpc/memcpy.c	1969-12-31 18:00:00.000000000 -0600
+++ newlib-2.2.0-mcpy-new-large-mcpy-new/newlib/libc/machine/powerpc/memcpy.c	2015-09-02 14:39:34.441187000 -0500
@@ -0,0 +1,4 @@
+#include <powerpc/asm.h>
+#include "../../string/memcpy.c"
+
+weak_alias(memcpy, largememcpy)

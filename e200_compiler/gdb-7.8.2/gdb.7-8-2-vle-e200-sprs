From 67f17272c81ffdd29806cc9b0398398923485a86 Mon Sep 17 00:00:00 2001
From: Alexander Fedotov-B55613 <b55613@freescale.com>
Date: Fri, 1 Sep 2017 12:38:14 +0300
Subject: [PATCH 2/4] e200 SPRs

---
 gdb/doc/gdb.texinfo                    |  43 +++++++++++
 gdb/features/rs6000/power-e200sprs.xml | 110 ++++++++++++++++++++++++++
 gdb/features/rs6000/powerpc-32.c       | 103 +++++++++++++++++++++++++
 gdb/features/rs6000/powerpc-32.xml     |   1 +
 gdb/features/rs6000/powerpc-vle.c      | 104 +++++++++++++++++++++++++
 gdb/features/rs6000/powerpc-vle.xml    |   1 +
 gdb/mi/mi-main.c                       |   8 ++
 gdb/ppc-tdep.h                         |  11 ++-
 gdb/rs6000-tdep.c                      | 137 +++++++++++++++++++++++++++++++--
 9 files changed, 512 insertions(+), 6 deletions(-)
 create mode 100755 gdb/features/rs6000/power-e200sprs.xml

diff --git a/gdb/doc/gdb.texinfo b/gdb/doc/gdb.texinfo
index 9e89855..6ab61be 100644
--- a/gdb/doc/gdb.texinfo
+++ b/gdb/doc/gdb.texinfo
@@ -29285,6 +29285,49 @@ don't appear in the actual output):
 @end smallexample
 
 
+@subheading The @code{-data-write-register-values} Command
+@findex -data-write-register-values
+
+@subsubheading Synopsis
+
+@smallexample
+ -data-write-register-values
+    @var{fmt} [ ( @var{regno} @var{values})*]
+@end smallexample
+
+Write given values into registers. The registers and values are
+given as pairs.
+
+Allowed formats for @var{fmt} are:
+
+@table @code
+@item x
+Hexadecimal
+@item o
+Octal
+@item t
+Binary
+@item d
+Decimal
+@item r
+Raw
+@item N
+Natural
+@end table
+
+@subsubheading Example
+
+For a PPC MBX board (note: line breaks are for readability only, they
+don't appear in the actual output):
+
+@smallexample
+(gdb)
+-data-write-register-values N 1008 32853
+^done
+(gdb)
+@end smallexample
+
+
 @subheading The @code{-data-read-memory} Command
 @findex -data-read-memory
 
diff --git a/gdb/features/rs6000/power-e200sprs.xml b/gdb/features/rs6000/power-e200sprs.xml
new file mode 100755
index 0000000..93dc75e
--- /dev/null
+++ b/gdb/features/rs6000/power-e200sprs.xml
@@ -0,0 +1,110 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2007-2014 Free Software Foundation, Inc.
+
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+
+<!DOCTYPE feature SYSTEM "gdb-target.dtd">
+<feature name="org.gnu.gdb.power.e200sprs">
+  <reg name="dec" bitsize="32" regnum="122"/>
+  <reg name="srr0" bitsize="32" regnum="126"/>
+  <reg name="srr1" bitsize="32" regnum="127"/>
+  <reg name="pid0" bitsize="32" regnum="148"/>
+  <reg name="decar" bitsize="32" regnum="154"/>
+  <reg name="csrr0" bitsize="32" regnum="158"/>
+  <reg name="csrr1" bitsize="32" regnum="159"/>
+  <reg name="dear" bitsize="32" regnum="161"/>
+  <reg name="esr" bitsize="32" regnum="162"/>
+  <reg name="ivpr" bitsize="32" regnum="163"/>
+  <reg name="usprg0" bitsize="32" regnum="356"/>
+  <reg name="utbl" bitsize="32" regnum="368"/>
+  <reg name="utbu" bitsize="32" regnum="369"/>
+  <reg name="sprg0" bitsize="32" regnum="372"/>
+  <reg name="sprg1" bitsize="32" regnum="373"/>
+  <reg name="sprg2" bitsize="32" regnum="374"/>
+  <reg name="sprg3" bitsize="32" regnum="375"/>
+  <reg name="sprg4" bitsize="32" regnum="376"/>
+  <reg name="sprg5" bitsize="32" regnum="377"/>
+  <reg name="sprg6" bitsize="32" regnum="378"/>
+  <reg name="sprg7" bitsize="32" regnum="379"/>
+  <reg name="tbl" bitsize="32" regnum="384"/>
+  <reg name="tbu" bitsize="32" regnum="385"/>
+  <reg name="pir" bitsize="32" regnum="386"/>
+  <reg name="pvr" bitsize="32" regnum="387"/>
+  <reg name="dbsr" bitsize="32" regnum="404"/>
+  <reg name="dbcr0" bitsize="32" regnum="408"/>
+  <reg name="dbcr1" bitsize="32" regnum="409"/>
+  <reg name="dbcr2" bitsize="32" regnum="410"/>
+  <reg name="iac1" bitsize="32" regnum="412"/>
+  <reg name="iac2" bitsize="32" regnum="413"/>
+  <reg name="iac3" bitsize="32" regnum="414"/>
+  <reg name="iac4" bitsize="32" regnum="415"/>
+  <reg name="dac1" bitsize="32" regnum="416"/>
+  <reg name="dac2" bitsize="32" regnum="417"/>
+  <reg name="dvc1" bitsize="32" regnum="418"/>
+  <reg name="dvc2" bitsize="32" regnum="419"/>
+  <reg name="tsr" bitsize="32" regnum="436"/>
+  <reg name="tcr" bitsize="32" regnum="440"/>
+  <reg name="ivor0" bitsize="32" regnum="500"/>
+  <reg name="ivor1" bitsize="32" regnum="501"/>
+  <reg name="ivor2" bitsize="32" regnum="502"/>
+  <reg name="ivor3" bitsize="32" regnum="503"/>
+  <reg name="ivor4" bitsize="32" regnum="504"/>
+  <reg name="ivor5" bitsize="32" regnum="505"/>
+  <reg name="ivor6" bitsize="32" regnum="506"/>
+  <reg name="ivor7" bitsize="32" regnum="507"/>
+  <reg name="ivor8" bitsize="32" regnum="508"/>
+  <reg name="ivor9" bitsize="32" regnum="509"/>
+  <reg name="ivor10" bitsize="32" regnum="510"/>
+  <reg name="ivor11" bitsize="32" regnum="511"/>
+  <reg name="ivor12" bitsize="32" regnum="512"/>
+  <reg name="ivor13" bitsize="32" regnum="513"/>
+  <reg name="ivor14" bitsize="32" regnum="514"/>
+  <reg name="ivor15" bitsize="32" regnum="515"/>
+  <reg name="spefscr" bitsize="32" regnum=" 612"/>
+  <reg name="l1cfg0" bitsize="32" regnum="615"/>
+  <reg name="l1cfg1" bitsize="32" regnum="616"/>
+  <reg name="ivor32" bitsize="32" regnum="628"/>
+  <reg name="ivor33" bitsize="32" regnum="629"/>
+  <reg name="ivor34" bitsize="32" regnum="630"/>
+  <reg name="ivor35" bitsize="32" regnum="631"/>
+  <reg name="ctxcr" bitsize="32" regnum="660"/>
+  <reg name="dbcr3" bitsize="32" regnum="661"/>
+  <reg name="dbcnt" bitsize="32" regnum="662"/>
+  <reg name="dbcr4" bitsize="32" regnum="663"/>
+  <reg name="dbcr5" bitsize="32" regnum="664"/>
+  <reg name="iac5" bitsize="32" regnum="665"/>
+  <reg name="iac6" bitsize="32" regnum="666"/>
+  <reg name="iac7" bitsize="32" regnum="667"/>
+  <reg name="altctxcr" bitsize="32" regnum="668"/>
+  <reg name="iac8" bitsize="32" regnum="668"/>
+  <reg name="dberc0" bitsize="32" regnum="669"/>
+  <reg name="mcsrr0" bitsize="32" regnum="670"/>
+  <reg name="mcsrr1" bitsize="32" regnum="671"/>
+  <reg name="mcsr" bitsize="32" regnum="672"/>
+  <reg name="mcar" bitsize="32" regnum="673"/>
+  <reg name="dsrr0" bitsize="32" regnum="674"/>
+  <reg name="dsrr1" bitsize="32" regnum="675"/>
+  <reg name="dbcr6" bitsize="32" regnum="703"/>
+  <reg name="sprg8" bitsize="32" regnum="704"/>
+  <reg name="sprg9" bitsize="32" regnum="705"/>
+  <reg name="mas0" bitsize="32" regnum="724"/>
+  <reg name="mas1" bitsize="32" regnum="725"/>
+  <reg name="mas2" bitsize="32" regnum="726"/>
+  <reg name="mas3" bitsize="32" regnum="727"/>
+  <reg name="mas4" bitsize="32" regnum="728"/>
+  <reg name="mas6" bitsize="32" regnum="730"/>
+  <reg name="tlb0cfg" bitsize="32" regnum="788"/>
+  <reg name="tlb1cfg" bitsize="32" regnum="789"/>
+  <reg name="l1finv1" bitsize="32" regnum="1059"/>
+  <reg name="hid0" bitsize="32" regnum="1108"/>
+  <reg name="hid1" bitsize="32" regnum="1109"/>
+  <reg name="l1csr0" bitsize="32" regnum="1110"/>
+  <reg name="l1csr1" bitsize="32" regnum="1111"/>
+  <reg name="mmucsr0" bitsize="32" regnum="1112"/>
+  <reg name="bucsr" bitsize="32" regnum="1113"/>
+  <reg name="mmucfg" bitsize="32" regnum="1115"/>
+  <reg name="l1finv0" bitsize="32" regnum="1116"/>
+  <reg name="svr" bitsize="32" regnum="1123"/>
+</feature>
diff --git a/gdb/features/rs6000/powerpc-32.c b/gdb/features/rs6000/powerpc-32.c
index 5ee5d9c..296c727 100644
--- a/gdb/features/rs6000/powerpc-32.c
+++ b/gdb/features/rs6000/powerpc-32.c
@@ -89,5 +89,108 @@ initialize_tdesc_powerpc_32 (void)
   tdesc_create_reg (feature, "f31", 63, 1, NULL, 64, "ieee_double");
   tdesc_create_reg (feature, "fpscr", 70, 1, "float", 32, "int");
 
+  feature = tdesc_create_feature (result, "org.gnu.gdb.power.e200sprs");
+  /* NOTE: regnum = SPR number + offset 100 */
+  tdesc_create_reg (feature, "dec",      122, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "srr0",     126, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "srr1",     127, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "pid0",     148, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "decar",    154, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "csrr0",    158, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "csrr1",    159, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dear",     161, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "esr",      162, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivpr",     163, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "usprg0",   356, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "utbl",     368, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "utbu",     369, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "sprg0",    372, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "sprg1",    373, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "sprg2",    374, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "sprg3",    375, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "sprg4",    376, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "sprg5",    377, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "sprg6",    378, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "sprg7",    379, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "tbl",      384, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "tbu",      385, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "pir",      386, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "pvr",      387, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dbsr",     404, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dbcr0",    408, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dbcr1",    409, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dbcr2",    410, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "iac1",     412, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "iac2",     413, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "iac3",     414, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "iac4",     415, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dac1",     416, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dac2",     417, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dvc1",     418, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dvc2",     419, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "tsr",      436, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "tcr",      440, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor0",    500, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor1",    501, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor2",    502, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor3",    503, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor4",    504, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor5",    505, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor6",    506, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor7",    507, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor8",    508, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor9",    509, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor10",   510, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor11",   511, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor12",   512, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor13",   513, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor14",   514, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor15",   515, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "spefscr",  612, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "l1cfg0",   615, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "l1cfg1",   616, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor32",   628, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor33",   629, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor34",   630, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor35",   631, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ctxcr",    660, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dbcr3",    661, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dbcnt",    662, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dbcr4",    663, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dbcr5",    664, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "iac5",     665, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "iac6",     666, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "iac7",     667, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "altctxcr", 668, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "iac8",     668, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dberc0",   669, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "mcsrr0",   670, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "mcsrr1",   671, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "mcsr",     672, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "mcar",     673, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dsrr0",    674, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dsrr1",    675, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dbcr6",    703, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "sprg8",    704, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "sprg9",    705, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "mas0",     724, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "mas1",     725, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "mas2",     726, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "mas3",     727, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "mas4",     728, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "mas6",     730, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "tlb0cfg",  788, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "tlb1cfg",  789, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "l1finv1", 1059, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "hid0",    1108, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "hid1",    1109, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "l1csr0",  1110, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "l1csr1",  1111, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "mmucsr0", 1112, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "bucsr",   1113, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "mmucfg",  1115, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "l1finv0", 1116, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "svr",     1123, 1, NULL, 32, "uint32");
+
   tdesc_powerpc_32 = result;
 }
diff --git a/gdb/features/rs6000/powerpc-32.xml b/gdb/features/rs6000/powerpc-32.xml
index e2cf103..7fabd24 100644
--- a/gdb/features/rs6000/powerpc-32.xml
+++ b/gdb/features/rs6000/powerpc-32.xml
@@ -13,4 +13,5 @@
   <architecture>powerpc:common</architecture>
   <xi:include href="power-core.xml"/>
   <xi:include href="power-fpu.xml"/>
+  <xi:include href="power-e200sprs.xml"/>
 </target>
diff --git a/gdb/features/rs6000/powerpc-vle.c b/gdb/features/rs6000/powerpc-vle.c
index 736da74..12b4cef 100644
--- a/gdb/features/rs6000/powerpc-vle.c
+++ b/gdb/features/rs6000/powerpc-vle.c
@@ -54,5 +54,109 @@ initialize_tdesc_powerpc_vle (void)
   tdesc_create_reg (feature, "ctr", 68, 1, NULL, 32, "uint32");
   tdesc_create_reg (feature, "xer", 69, 1, NULL, 32, "uint32");
 
+  feature = tdesc_create_feature (result, "org.gnu.gdb.power.e200sprs");
+
+  /* NOTE: regnum = SPR number + offset 100 */
+  tdesc_create_reg (feature, "dec",      122, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "srr0",     126, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "srr1",     127, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "pid0",     148, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "decar",    154, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "csrr0",    158, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "csrr1",    159, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dear",     161, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "esr",      162, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivpr",     163, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "usprg0",   356, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "utbl",     368, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "utbu",     369, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "sprg0",    372, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "sprg1",    373, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "sprg2",    374, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "sprg3",    375, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "sprg4",    376, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "sprg5",    377, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "sprg6",    378, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "sprg7",    379, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "tbl",      384, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "tbu",      385, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "pir",      386, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "pvr",      387, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dbsr",     404, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dbcr0",    408, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dbcr1",    409, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dbcr2",    410, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "iac1",     412, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "iac2",     413, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "iac3",     414, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "iac4",     415, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dac1",     416, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dac2",     417, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dvc1",     418, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dvc2",     419, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "tsr",      436, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "tcr",      440, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor0",    500, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor1",    501, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor2",    502, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor3",    503, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor4",    504, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor5",    505, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor6",    506, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor7",    507, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor8",    508, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor9",    509, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor10",   510, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor11",   511, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor12",   512, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor13",   513, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor14",   514, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor15",   515, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "spefscr",  612, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "l1cfg0",   615, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "l1cfg1",   616, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor32",   628, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor33",   629, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor34",   630, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ivor35",   631, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "ctxcr",    660, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dbcr3",    661, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dbcnt",    662, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dbcr4",    663, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dbcr5",    664, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "iac5",     665, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "iac6",     666, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "iac7",     667, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "altctxcr", 668, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "iac8",     668, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dberc0",   669, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "mcsrr0",   670, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "mcsrr1",   671, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "mcsr",     672, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "mcar",     673, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dsrr0",    674, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dsrr1",    675, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "dbcr6",    703, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "sprg8",    704, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "sprg9",    705, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "mas0",     724, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "mas1",     725, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "mas2",     726, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "mas3",     727, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "mas4",     728, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "mas6",     730, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "tlb0cfg",  788, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "tlb1cfg",  789, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "l1finv1", 1059, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "hid0",    1108, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "hid1",    1109, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "l1csr0",  1110, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "l1csr1",  1111, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "mmucsr0", 1112, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "bucsr",   1113, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "mmucfg",  1115, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "l1finv0", 1116, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "svr",     1123, 1, NULL, 32, "uint32");
+
   tdesc_powerpc_vle = result;
 }
diff --git a/gdb/features/rs6000/powerpc-vle.xml b/gdb/features/rs6000/powerpc-vle.xml
index 0492098..10c442f 100644
--- a/gdb/features/rs6000/powerpc-vle.xml
+++ b/gdb/features/rs6000/powerpc-vle.xml
@@ -10,4 +10,5 @@
   <architecture>powerpc:vle</architecture>
   <xi:include href="power-core.xml"/>
   <xi:include href="power-spe.xml"/>
+  <xi:include href="power-e200sprs.xml"/>
 </target>
diff --git a/gdb/mi/mi-main.c b/gdb/mi/mi-main.c
index 96dfc71..4275371 100644
--- a/gdb/mi/mi-main.c
+++ b/gdb/mi/mi-main.c
@@ -1015,6 +1015,14 @@ mi_cmd_data_list_register_names (char *command, char **argv, int argc)
 	   regnum < numregs;
 	   regnum++)
 	{
+	  /* FIXME: Dirty hack to hide e200 SPR pseudoregisters */
+	  if (regnum >= 1000 && regnum < 1122)
+	    {
+	      ui_out_field_string (uiout, NULL, "");
+	      continue;
+	    }
+	  /* Dirty hack end */
+
 	  if (gdbarch_register_name (gdbarch, regnum) == NULL
 	      || *(gdbarch_register_name (gdbarch, regnum)) == '\0')
 	    ui_out_field_string (uiout, NULL, "");
diff --git a/gdb/ppc-tdep.h b/gdb/ppc-tdep.h
index 08554ff..707e113 100644
--- a/gdb/ppc-tdep.h
+++ b/gdb/ppc-tdep.h
@@ -63,6 +63,7 @@ enum return_value_convention ppc64_sysv_abi_return_value (struct gdbarch *gdbarc
 /* From rs6000-tdep.c...  */
 int altivec_register_p (struct gdbarch *gdbarch, int regno);
 int vsx_register_p (struct gdbarch *gdbarch, int regno);
+int spr_register_p (struct gdbarch *gdbarch, int regno);
 int spe_register_p (struct gdbarch *gdbarch, int regno);
 
 /* Return non-zero if the architecture described by GDBARCH has
@@ -76,6 +77,7 @@ int ppc_altivec_support_p (struct gdbarch *gdbarch);
 /* Return non-zero if the architecture described by GDBARCH has
    VSX registers (vsr0 --- vsr63).  */
 int vsx_support_p (struct gdbarch *gdbarch);
+int spr_support_p (struct gdbarch *gdbarch);
 int ppc_deal_with_atomic_sequence (struct frame_info *frame);
 
 
@@ -251,6 +253,10 @@ struct gdbarch_tdep
     /* Offset to ABI specific location where link register is saved.  */
     int lr_frame_offset;	
 
+    /* e200 special purpose registers.  */
+    int ppc_spr_regnum;		/* First spr register.  */
+    int ppc_spr_pseudo_regnum;
+
     /* An array of integers, such that sim_regno[I] is the simulator
        register number for GDB register number I, or -1 if the
        simulator does not implement that register.  */
@@ -271,7 +277,8 @@ enum
     ppc_num_vrs = 32,		/* 32 Altivec vector registers.  */
     ppc_num_vshrs = 32,		/* 32 doublewords (dword 1 of vs0~vs31).  */
     ppc_num_vsrs = 64,		/* 64 VSX vector registers.  */
-    ppc_num_efprs = 32		/* 32 Extended FP registers.  */
+    ppc_num_efprs = 32,		/* 32 Extended FP registers.  */
+    ppc_num_sprs = 122		/* e200 SPR registers.  */
   };
 
 
@@ -299,6 +306,8 @@ enum {
   PPC_VRSAVE_REGNUM = 139,
   PPC_VSR0_UPPER_REGNUM = 140,
   PPC_VSR31_UPPER_REGNUM = 171,
+  PPC_SPR_REGNUM = 878,          /* equals placeholder 1000 minus ppc_num_sprs */
+  PPC_SPR_LAST_REGNUM = 999,
   PPC_NUM_REGS
 };
 
diff --git a/gdb/rs6000-tdep.c b/gdb/rs6000-tdep.c
index 55bbd8b..51e3a0c 100644
--- a/gdb/rs6000-tdep.c
+++ b/gdb/rs6000-tdep.c
@@ -103,6 +103,11 @@
     && (regnum) >= (tdep)->ppc_efpr0_regnum \
     && (regnum) < (tdep)->ppc_efpr0_regnum + ppc_num_efprs)
 
+/* Determine if regnum is an e200 SPR register.  */
+#define IS_SPR_PSEUDOREG(tdep, regnum) ((tdep)->ppc_spr_pseudo_regnum >= 0 \
+    && (regnum) >= (tdep)->ppc_spr_pseudo_regnum \
+    && (regnum) < (tdep)->ppc_spr_pseudo_regnum + ppc_num_sprs)
+
 /* The list of available "set powerpc ..." and "show powerpc ..."
    commands.  */
 static struct cmd_list_element *setpowerpccmdlist = NULL;
@@ -120,6 +125,29 @@ static const char *const powerpc_vector_strings[] =
   NULL
 };
 
+
+static const char *const e200sprs[] = {
+  "dec", "srr0", "srr1", "pid0", "decar", "csrr0", "csrr1",
+  "dear", "esr", "ivpr", "usprg0", "utbl", "utbu", "sprg0",
+  "sprg1", "sprg2", "sprg3", "sprg4", "sprg5", "sprg6", "sprg7",
+  "tbl", "tbu", "pir", "pvr", "dbsr", "dbcr0", "dbcr1", "dbcr2",
+  "iac1", "iac2", "iac3", "iac4", "dac1", "dac2", "dvc1", "dvc2",
+  "tsr", "tcr", "ivor0", "ivor1", "ivor2", "ivor3", "ivor4",
+  "ivor5", "ivor6", "ivor7", "ivor8", "ivor9", "ivor10", "ivor11",
+  "ivor12", "ivor13", "ivor14", "ivor15", "spefscr", "l1cfg0",
+  "l1cfg1", "ivor32", "ivor33", "ivor34", "ivor35", "ctxcr", "dbcr3",
+  "dbcnt", "dbcr4", "dbcr5", "iac5", "iac6", "iac7", "altctxcr",
+  "iac8", "dberc0", "mcsrr0", "mcsrr1", "mcsr", "mcar", "dsrr0",
+  "dsrr1", "dbcr6", "sprg8", "sprg9", "mas0", "mas1", "mas2",
+  "mas3", "mas4", "mas6", "tlb0cfg", "tlb1cfg", "l1finv1",
+  "hid0", "hid1", "l1csr0", "l1csr1", "mmucsr0", "bucsr",
+  "mmucfg", "l1finv0", "svr", "tir", "npidr", "ddam", "dac3", "dac4",
+  "dbcr7", "dbcr8", "ddear", "dvc1u", "dvc2u", "edbrac0", "dmemcfg0",
+  "imemcfg0", "devent","sir", "mpu0cfg", "mpu0csr0", "l1csr2",
+  "usprg4", "usprg5", "usprg6", "usprg7"
+  };
+
+
 /* A variable that can be configured by the user.  */
 static enum powerpc_vector_abi powerpc_vector_abi_global = POWERPC_VEC_AUTO;
 static const char *powerpc_vector_abi_string = "auto";
@@ -151,6 +179,18 @@ struct rs6000_framedata
   };
 
 
+/* Is REGNO a SPR register? Return 1 if so, 0 otherwise.  */
+int
+spr_register_p (struct gdbarch *gdbarch, int regno)
+{
+  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);
+  if (tdep->ppc_spr_pseudo_regnum < 0)
+    return 0;
+  else
+    return (regno >= tdep->ppc_spr_regnum &&
+	    regno < tdep->ppc_spr_regnum + ppc_num_sprs);
+}
+
 /* Is REGNO a VSX register? Return 1 if so, 0 otherwise.  */
 int
 vsx_register_p (struct gdbarch *gdbarch, int regno)
@@ -2905,6 +2945,12 @@ rs6000_register_name (struct gdbarch *gdbarch, int regno)
       && regno < tdep->ppc_vsr0_upper_regnum + ppc_num_gprs)
     return "";
 
+  /* Hide SPRs from list of registers */
+  if (tdep->ppc_spr_regnum >= 0
+      && tdep->ppc_spr_regnum <= regno
+      && regno < tdep->ppc_spr_regnum + ppc_num_sprs)
+    return "";
+
   /* Check if the SPE pseudo registers are available.  */
   if (IS_SPE_PSEUDOREG (tdep, regno))
     {
@@ -2959,6 +3005,13 @@ rs6000_register_name (struct gdbarch *gdbarch, int regno)
       return efpr_regnames[regno - tdep->ppc_efpr0_regnum];
     }
 
+  if (IS_SPR_PSEUDOREG (tdep, regno))
+    {
+      gdb_assert((regno - tdep->ppc_spr_pseudo_regnum) < (sizeof(e200sprs) / sizeof(const char *const)));
+
+      return tdesc_register_name(gdbarch, PPC_SPR_REGNUM + regno - tdep->ppc_spr_pseudo_regnum);
+    }
+
   return tdesc_register_name (gdbarch, regno);
 }
 
@@ -2974,7 +3027,8 @@ rs6000_pseudo_register_type (struct gdbarch *gdbarch, int regnum)
   gdb_assert (IS_SPE_PSEUDOREG (tdep, regnum)
 	      || IS_DFP_PSEUDOREG (tdep, regnum)
 	      || IS_VSX_PSEUDOREG (tdep, regnum)
-	      || IS_EFP_PSEUDOREG (tdep, regnum));
+	      || IS_EFP_PSEUDOREG (tdep, regnum)
+	      || IS_SPR_PSEUDOREG (tdep, regnum));
 
   /* These are the e500 pseudo-registers.  */
   if (IS_SPE_PSEUDOREG (tdep, regnum))
@@ -2985,6 +3039,9 @@ rs6000_pseudo_register_type (struct gdbarch *gdbarch, int regnum)
   else if (IS_VSX_PSEUDOREG (tdep, regnum))
     /* POWER7 VSX pseudo-registers.  */
     return rs6000_builtin_type_vec128 (gdbarch);
+  else if (IS_SPR_PSEUDOREG (tdep, regnum))
+    /* e200 SPR pseudo-registers.  */
+    return builtin_type (gdbarch)->builtin_uint32;
   else
     /* POWER7 Extended FP pseudo-registers.  */
     return builtin_type (gdbarch)->builtin_double;
@@ -3001,10 +3058,11 @@ rs6000_pseudo_register_reggroup_p (struct gdbarch *gdbarch, int regnum,
   gdb_assert (IS_SPE_PSEUDOREG (tdep, regnum)
 	      || IS_DFP_PSEUDOREG (tdep, regnum)
 	      || IS_VSX_PSEUDOREG (tdep, regnum)
-	      || IS_EFP_PSEUDOREG (tdep, regnum));
+	      || IS_EFP_PSEUDOREG (tdep, regnum)
+	      || IS_SPR_PSEUDOREG (tdep, regnum));
 
   /* These are the e500 pseudo-registers or the POWER7 VSX registers.  */
-  if (IS_SPE_PSEUDOREG (tdep, regnum) || IS_VSX_PSEUDOREG (tdep, regnum))
+  if (IS_SPE_PSEUDOREG (tdep, regnum) || IS_VSX_PSEUDOREG (tdep, regnum) || IS_SPR_PSEUDOREG (tdep, regnum))
     return group == all_reggroup || group == vector_reggroup;
   else
     /* PPC decimal128 or Extended FP pseudo-registers.  */
@@ -3309,6 +3367,36 @@ efpr_pseudo_register_write (struct gdbarch *gdbarch, struct regcache *regcache,
 			   buffer);
 }
 
+/* Read method for e200 SPR pseudo-registers.  */
+static enum register_status
+spr_pseudo_register_read (struct gdbarch *gdbarch, struct regcache *regcache,
+			   int reg_nr, gdb_byte *buffer)
+{
+  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);
+  int reg_index = reg_nr - tdep->ppc_spr_pseudo_regnum;
+  int offset = gdbarch_byte_order (gdbarch) == BFD_ENDIAN_BIG ? 0 : 8;
+
+
+  return regcache_raw_read_part (regcache, tdep->ppc_spr_regnum + reg_index,
+				 offset, register_size (gdbarch, reg_nr),
+				 buffer);
+}
+
+/* Write method for e200 SPR pseudo-registers.  */
+static void
+spr_pseudo_register_write (struct gdbarch *gdbarch, struct regcache *regcache,
+			    int reg_nr, const gdb_byte *buffer)
+{
+  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);
+  int reg_index = reg_nr - tdep->ppc_spr_pseudo_regnum;
+  int offset = gdbarch_byte_order (gdbarch) == BFD_ENDIAN_BIG ? 0 : 8;
+
+  /* Write the portion that overlaps the VMX register.  */
+  regcache_raw_write_part (regcache, tdep->ppc_spr_regnum + reg_index,
+			   offset, register_size (gdbarch, reg_nr),
+			   buffer);
+}
+
 static enum register_status
 rs6000_pseudo_register_read (struct gdbarch *gdbarch,
 			     struct regcache *regcache,
@@ -3321,6 +3409,8 @@ rs6000_pseudo_register_read (struct gdbarch *gdbarch,
 
   if (IS_SPE_PSEUDOREG (tdep, reg_nr))
     return e500_pseudo_register_read (gdbarch, regcache, reg_nr, buffer);
+  else if (IS_SPR_PSEUDOREG (tdep, reg_nr))
+    return spr_pseudo_register_read (gdbarch, regcache, reg_nr, buffer);
   else if (IS_DFP_PSEUDOREG (tdep, reg_nr))
     return dfp_pseudo_register_read (gdbarch, regcache, reg_nr, buffer);
   else if (IS_VSX_PSEUDOREG (tdep, reg_nr))
@@ -3346,6 +3436,8 @@ rs6000_pseudo_register_write (struct gdbarch *gdbarch,
 
   if (IS_SPE_PSEUDOREG (tdep, reg_nr))
     e500_pseudo_register_write (gdbarch, regcache, reg_nr, buffer);
+  else if (IS_SPR_PSEUDOREG (tdep, reg_nr))
+    spr_pseudo_register_write (gdbarch, regcache, reg_nr, buffer);
   else if (IS_DFP_PSEUDOREG (tdep, reg_nr))
     dfp_pseudo_register_write (gdbarch, regcache, reg_nr, buffer);
   else if (IS_VSX_PSEUDOREG (tdep, reg_nr))
@@ -4084,7 +4176,7 @@ rs6000_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)
   enum powerpc_vector_abi vector_abi = powerpc_vector_abi_global;
   enum powerpc_elf_abi elf_abi = POWERPC_ELF_AUTO;
   int have_fpu = 1, have_spe = 0, have_mq = 0, have_altivec = 0, have_dfp = 0,
-      have_vsx = 0;
+      have_vsx = 0, have_sprs = 0;
   int tdesc_wordsize = -1;
   const struct target_desc *tdesc = info.target_desc;
   struct tdesc_arch_data *tdesc_data = NULL;
@@ -4364,6 +4456,21 @@ rs6000_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)
 	}
       else
 	have_spe = 0;
+
+      feature = tdesc_find_feature (tdesc,
+				    "org.gnu.gdb.power.e200sprs");
+
+      if (feature != NULL)
+	{
+	  for (i = 0; i < (sizeof(e200sprs) / sizeof(const char *const)); i++)
+	    tdesc_numbered_register (feature, tdesc_data,
+				     PPC_SPR_REGNUM + i,
+				     e200sprs[i]);
+
+	  have_sprs = 1;
+	}
+      else
+	have_sprs = 0;
     }
 
   /* If we have a 64-bit binary on a 32-bit target, complain.  Also
@@ -4539,6 +4646,8 @@ rs6000_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)
   tdep->ppc_ev0_upper_regnum = have_spe ? PPC_SPE_UPPER_GP0_REGNUM : -1;
   tdep->ppc_acc_regnum = have_spe ? PPC_SPE_ACC_REGNUM : -1;
   tdep->ppc_spefscr_regnum = have_spe ? PPC_SPE_FSCR_REGNUM : -1;
+  tdep->ppc_spr_regnum = have_sprs ? PPC_SPR_REGNUM : -1;
+
 
   set_gdbarch_pc_regnum (gdbarch, PPC_PC_REGNUM);
   set_gdbarch_sp_regnum (gdbarch, PPC_R0_REGNUM + 1);
@@ -4562,7 +4671,7 @@ rs6000_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)
   else
     tdep->lr_frame_offset = 4;
 
-  if (have_spe || have_dfp || have_vsx)
+  if (have_spe || have_dfp || have_vsx || have_sprs)
     {
       set_gdbarch_pseudo_register_read (gdbarch, rs6000_pseudo_register_read);
       set_gdbarch_pseudo_register_write (gdbarch,
@@ -4579,6 +4688,11 @@ rs6000_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)
 
   set_gdbarch_num_regs (gdbarch, PPC_NUM_REGS);
 
+  if (have_sprs)
+    num_pseudoregs += ppc_num_sprs;
+  else if (have_spe || have_dfp || have_vsx)
+    num_pseudoregs += ppc_num_sprs; /* SPRs placeholder */
+
   if (have_spe)
     num_pseudoregs += 32;
   if (have_dfp)
@@ -4700,9 +4814,22 @@ rs6000_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)
   tdep->ppc_dl0_regnum = -1;
   tdep->ppc_vsr0_regnum = -1;
   tdep->ppc_efpr0_regnum = -1;
+  tdep->ppc_spr_pseudo_regnum = -1;
 
   cur_reg = gdbarch_num_regs (gdbarch);
 
+  if (have_sprs)
+    {
+      tdep->ppc_spr_pseudo_regnum = cur_reg;
+      cur_reg += ppc_num_sprs;
+    }
+  else if (have_spe || have_dfp || have_vsx)
+    {
+      /* SPRs placeholder. Names will be absent */
+      tdep->ppc_spr_pseudo_regnum = cur_reg;
+      cur_reg += ppc_num_sprs;
+    }
+
   if (have_spe)
     {
       tdep->ppc_ev0_regnum = cur_reg;
-- 
2.7.4


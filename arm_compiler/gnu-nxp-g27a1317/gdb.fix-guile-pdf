--- gdb-7.12.1/gdb/doc/guile.texi-orig	2017-12-14 10:10:12.492773000 -0600
+++ gdb-7.12.1/gdb/doc/guile.texi	2017-12-14 13:36:06.233473000 -0600
@@ -1708,48 +1708,6 @@
 consist of multiple lines and are terminated with @code{end}.
 
 @c TODO: line length
-@deffn {Scheme Procedure} (make-command name @r{[}#:invoke invoke{]} @r{[}#:command-class command-class@r{]} @r{[}#:completer-class completer{]} @r{[}#:prefix? prefix@r{]} @r{[}#:doc doc-string{]})
-
-The argument @var{name} is the name of the command.  If @var{name} consists of
-multiple words, then the initial words are looked for as prefix
-commands.  In this case, if one of the prefix commands does not exist,
-an exception is raised.
-
-The result is the @code{<gdb:command>} object representing the command.
-The command is not usable until it has been registered with @value{GDBN}
-with @code{register-command!}.
-
-The rest of the arguments are optional.
-
-The argument @var{invoke} is a procedure of three arguments: @var{self},
-@var{args} and @var{from-tty}.  The argument @var{self} is the
-@code{<gdb:command>} object representing the command.
-The argument @var{args} is a string representing the arguments passed to
-the command, after leading and trailing whitespace has been stripped.
-The argument @var{from-tty} is a boolean flag and specifies whether the
-command should consider itself to have been originated from the user
-invoking it interactively.  If this function throws an exception,
-it is turned into a @value{GDBN} @code{error} call.
-Otherwise, the return value is ignored.
-
-The argument @var{command-class} is one of the @samp{COMMAND_} constants
-defined below.  This argument tells @value{GDBN} how to categorize the
-new command in the help system.  The default is @code{COMMAND_NONE}.
-
-The argument @var{completer} is either @code{#f}, one of the @samp{COMPLETE_}
-constants defined below, or a procedure, also defined below.
-This argument tells @value{GDBN} how to perform completion
-for this command.  If not provided or if the value is @code{#f},
-then no completion is performed on the command.
-
-The argument @var{prefix} is a boolean flag indicating whether the new
-command is a prefix command; sub-commands of this command may be
-registered.
-
-The argument @var{doc-string} is help text for the new command.
-If no documentation string is provided, the default value ``This command is
-not documented.'' is used.
-@end deffn
 
 @deffn {Scheme Procedure} register-command! command
 Add @var{command}, a @code{<gdb:command>} object, to @value{GDBN}'s
@@ -1998,76 +1956,6 @@
 @code{show} commands.  @xref{Help}.
 
 @c TODO line length
-@deffn {Scheme Procedure} (make-parameter name @r{[}#:command-class command-class@r{]} @r{[}#:parameter-type parameter-type{]} @r{[}#:enum-list enum-list@r{]} @r{[}#:set-func set-func{]} @r{[}#:show-func show-func{]} @r{[}#:doc doc{]} @r{[}#:set-doc set-doc{]} @r{[}#:show-doc show-doc{]} @r{[}#:initial-value initial-value{]})
-
-The argument @var{name} is the name of the new parameter.  If @var{name}
-consists of multiple words, then the initial words are looked for as prefix
-parameters.  An example of this can be illustrated with the
-@code{set print} set of parameters.  If @var{name} is
-@code{print foo}, then @code{print} will be searched as the prefix
-parameter.  In this case the parameter can subsequently be accessed in
-@value{GDBN} as @code{set print foo}.
-If @var{name} consists of multiple words, and no prefix parameter group
-can be found, an exception is raised.
-
-The result is the @code{<gdb:parameter>} object representing the parameter.
-The parameter is not usable until it has been registered with @value{GDBN}
-with @code{register-parameter!}.
-
-The rest of the arguments are optional.
-
-The argument @var{command-class} should be one of the @samp{COMMAND_} constants
-(@pxref{Commands In Guile}).  This argument tells @value{GDBN} how to
-categorize the new parameter in the help system.
-The default is @code{COMMAND_NONE}.
-
-The argument @var{parameter-type} should be one of the @samp{PARAM_} constants
-defined below.  This argument tells @value{GDBN} the type of the new
-parameter; this information is used for input validation and
-completion.  The default is @code{PARAM_BOOLEAN}.
-
-If @var{parameter-type} is @code{PARAM_ENUM}, then
-@var{enum-list} must be a list of strings.  These strings
-represent the possible values for the parameter.
-
-If @var{parameter-type} is not @code{PARAM_ENUM}, then the presence
-of @var{enum-list} will cause an exception to be thrown.
-
-The argument @var{set-func} is a function of one argument: @var{self} which
-is the @code{<gdb:parameter>} object representing the parameter.
-@value{GDBN} will call this function when a @var{parameter}'s value has
-been changed via the @code{set} API (for example, @kbd{set foo off}).
-The value of the parameter has already been set to the new value.
-This function must return a string to be displayed to the user.
-@value{GDBN} will add a trailing newline if the string is non-empty.
-@value{GDBN} generally doesn't print anything when a parameter is set,
-thus typically this function should return @samp{""}.
-A non-empty string result should typically be used for displaying warnings
-and errors.
-
-The argument @var{show-func} is a function of two arguments: @var{self} which
-is the @code{<gdb:parameter>} object representing the parameter, and
-@var{svalue} which is the string representation of the current value.
-@value{GDBN} will call this function when a @var{parameter}'s
-@code{show} API has been invoked (for example, @kbd{show foo}).
-This function must return a string, and will be displayed to the user.
-@value{GDBN} will add a trailing newline.
-
-The argument @var{doc} is the help text for the new parameter.
-If there is no documentation string, a default value is used.
-
-The argument @var{set-doc} is the help text for this parameter's
-@code{set} command.
-
-The argument @var{show-doc} is the help text for this parameter's
-@code{show} command.
-
-The argument @var{initial-value} specifies the initial value of the parameter.
-If it is a function, it takes one parameter, the @code{<gdb:parameter>}
-object and its result is used as the initial value of the parameter.
-The initial value must be valid for the parameter type,
-otherwise an exception is thrown.
-@end deffn
 
 @deffn {Scheme Procedure} register-parameter! parameter
 Add @var{parameter}, a @code{<gdb:parameter>} object, to @value{GDBN}'s
@@ -2710,28 +2598,6 @@
 @end deffn
 
 @c TODO: line length
-@deffn {Scheme Procedure} lookup-symbol name @r{[}#:block block@r{]} @r{[}#:domain domain@r{]}
-This function searches for a symbol by name.  The search scope can be
-restricted to the parameters defined in the optional domain and block
-arguments.
-
-@var{name} is the name of the symbol.  It must be a string.  The
-optional @var{block} argument restricts the search to symbols visible
-in that @var{block}.  The @var{block} argument must be a
-@code{<gdb:block>} object.  If omitted, the block for the current frame
-is used.  The optional @var{domain} argument restricts
-the search to the domain type.  The @var{domain} argument must be a
-domain constant defined in the @code{(gdb)} module and described later
-in this chapter.
-
-The result is a list of two elements.
-The first element is a @code{<gdb:symbol>} object or @code{#f} if the symbol
-is not found.
-If the symbol is found, the second element is @code{#t} if the symbol
-is a field of a method's object (e.g., @code{this} in C@t{++}),
-otherwise it is @code{#f}.
-If the symbol is not found, the second element is @code{#f}.
-@end deffn
 
 @deffn {Scheme Procedure} lookup-global-symbol name @r{[}#:domain domain@r{]}
 This function searches for a global symbol by name.
@@ -2945,77 +2811,6 @@
 @code{(gdb)} module:
 
 @c TODO: line length
-@deffn {Scheme Procedure} make-breakpoint location @r{[}#:type type@r{]} @r{[}#:wp-class wp-class@r{]} @r{[}#:internal internal@r{]}
-Create a new breakpoint at @var{location}, a string naming the
-location of the breakpoint, or an expression that defines a watchpoint.
-The contents can be any location recognized by the @code{break} command,
-or in the case of a watchpoint, by the @code{watch} command.
-
-The breakpoint is initially marked as @samp{invalid}.
-The breakpoint is not usable until it has been registered with @value{GDBN}
-with @code{register-breakpoint!}, at which point it becomes @samp{valid}.
-The result is the @code{<gdb:breakpoint>} object representing the breakpoint.
-
-The optional @var{type} denotes the breakpoint to create.
-This argument can be either @code{BP_BREAKPOINT} or @code{BP_WATCHPOINT},
-and defaults to @code{BP_BREAKPOINT}.
-
-The optional @var{wp-class} argument defines the class of watchpoint to
-create, if @var{type} is @code{BP_WATCHPOINT}.  If a watchpoint class is
-not provided, it is assumed to be a @code{WP_WRITE} class.
-
-The optional @var{internal} argument allows the breakpoint to become
-invisible to the user.  The breakpoint will neither be reported when
-registered, nor will it be listed in the output from @code{info breakpoints}
-(but will be listed with the @code{maint info breakpoints} command).
-If an internal flag is not provided, the breakpoint is visible
-(non-internal).
-
-When a watchpoint is created, @value{GDBN} will try to create a
-hardware assisted watchpoint.  If successful, the type of the watchpoint
-is changed from @code{BP_WATCHPOINT} to @code{BP_HARDWARE_WATCHPOINT}
-for @code{WP_WRITE}, @code{BP_READ_WATCHPOINT} for @code{WP_READ},
-and @code{BP_ACCESS_WATCHPOINT} for @code{WP_ACCESS}.
-If not successful, the type of the watchpoint is left as @code{WP_WATCHPOINT}.
-
-The available types are represented by constants defined in the @code{gdb}
-module:
-
-@vtable @code
-@item BP_BREAKPOINT
-Normal code breakpoint.
-
-@item BP_WATCHPOINT
-Watchpoint breakpoint.
-
-@item BP_HARDWARE_WATCHPOINT
-Hardware assisted watchpoint.
-This value cannot be specified when creating the breakpoint.
-
-@item BP_READ_WATCHPOINT
-Hardware assisted read watchpoint.
-This value cannot be specified when creating the breakpoint.
-
-@item BP_ACCESS_WATCHPOINT
-Hardware assisted access watchpoint.
-This value cannot be specified when creating the breakpoint.
-@end vtable
-
-The available watchpoint types represented by constants are defined in the
-@code{(gdb)} module:
-
-@vtable @code
-@item WP_READ
-Read only watchpoint.
-
-@item WP_WRITE
-Write only watchpoint.
-
-@item WP_ACCESS
-Read/Write watchpoint.
-@end vtable
-
-@end deffn
 
 @deffn {Scheme Procedure} register-breakpoint! breakpoint
 Add @var{breakpoint}, a @code{<gdb:breakpoint>} object, to @value{GDBN}'s
@@ -3432,68 +3227,6 @@
 allowing one to disassemble from any source, and not just target memory.
 
 @c TODO: line length
-@deffn {Scheme Procedure} arch-disassemble arch start-pc @r{[}#:port port@r{]} @r{[}#:offset offset@r{]} @r{[}#:size size@r{]} @r{[}#:count count@r{]}
-Return a list of disassembled instructions starting from the memory
-address @var{start-pc}.
-
-The optional argument @var{port} specifies the input port to read bytes from.
-If @var{port} is @code{#f} then bytes are read from target memory.
-
-The optional argument @var{offset} specifies the address offset of the
-first byte in @var{port}.  This is useful, for example, when @var{port}
-specifies a @samp{bytevector} and you want the bytevector to be disassembled
-as if it came from that address.  The @var{start-pc} passed to the reader
-for @var{port} is offset by the same amount.
-
-Example:
-@smallexample
-(gdb) guile (use-modules (rnrs io ports))
-(gdb) guile (define pc (value->integer (parse-and-eval "$pc")))
-(gdb) guile (define mem (open-memory #:start pc))
-(gdb) guile (define bv (get-bytevector-n mem 10))
-(gdb) guile (define bv-port (open-bytevector-input-port bv))
-(gdb) guile (define arch (current-arch))
-(gdb) guile (arch-disassemble arch pc #:port bv-port #:offset pc)
-(((address . 4195516) (asm . "mov    $0x4005c8,%edi") (length . 5)))
-@end smallexample
-
-The optional arguments @var{size} and
-@var{count} determine the number of instructions in the returned list.
-If either @var{size} or @var{count} is specified as zero, then
-no instructions are disassembled and an empty list is returned.
-If both the optional arguments @var{size} and @var{count} are
-specified, then a list of at most @var{count} disassembled instructions
-whose start address falls in the closed memory address interval from
-@var{start-pc} to (@var{start-pc} + @var{size} - 1) are returned.
-If @var{size} is not specified, but @var{count} is specified,
-then @var{count} number of instructions starting from the address
-@var{start-pc} are returned.  If @var{count} is not specified but
-@var{size} is specified, then all instructions whose start address
-falls in the closed memory address interval from @var{start-pc} to
-(@var{start-pc} + @var{size} - 1) are returned.
-If neither @var{size} nor @var{count} are specified, then a single
-instruction at @var{start-pc} is returned.
-
-Each element of the returned list is an alist (associative list)
-with the following keys:
-
-@table @code
-
-@item address
-The value corresponding to this key is a Guile integer of
-the memory address of the instruction.
-
-@item asm
-The value corresponding to this key is a string value which represents
-the instruction with assembly language mnemonics.  The assembly
-language flavor used is the same as that specified by the current CLI
-variable @code{disassembly-flavor}.  @xref{Machine Code}.
-
-@item length
-The value corresponding to this key is the length of the instruction in bytes.
-
-@end table
-@end deffn
 
 @node I/O Ports in Guile
 @subsubsection I/O Ports in Guile
